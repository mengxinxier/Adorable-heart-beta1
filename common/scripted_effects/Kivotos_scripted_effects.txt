# 科技花费计算
Kivotos_tech_rank_cost_count = {
	if = {
		limit = { check_variable = { Kivotos_Tech_rank < tech_rank } } #科技代差
		set_temp_variable = { var_2 = Kivotos_Tech_rank }
		subtract_from_temp_variable = { tech_rank = var_2 } #科技代差
		add_to_temp_variable = { tech_rank = 1 }
		multiply_temp_variable = { var_1 = tech_rank }
	}
	subtract_from_variable = { research_point = var_1 }
	if = {
		limit = { 
			add_to_temp_variable = { tech_rank = 1 }
			check_variable = { Kivotos_Tech_rank < tech_rank } 
		}
		subtract_from_variable = { Kivotos_rank_up_num = 1 }
	}
}
#科技类型花费修正
# tech_type
# 步兵装备 = 1
# 炮兵装备 = 2
# 摩托化/机械化 = 3
# 火车 = 4
# 支援/特种 = 5
# 坦克 = 6
# 飞机 = 7
# 舰船 = 8
# 工业/工程 = 9
# 电子/资源 = 10
# Kivotos_tech_cost_base_factor
# Kivotos_tech_cost_inf_factor
# Kivotos_tech_cost_art_factor
# Kivotos_tech_cost_mot_factor
# Kivotos_tech_cost_tra_factor
# Kivotos_tech_cost_sup_factor
# Kivotos_tech_cost_arm_factor
# Kivotos_tech_cost_air_factor
# Kivotos_tech_cost_nvy_factor
# Kivotos_tech_cost_ind_factor
# Kivotos_tech_cost_ele_factor
Kivotos_tech_cost_factor_count = {

	set_temp_variable = { Kivotos_tech_cost_base = Kivotos_tech_cost_base_factor }
	set_temp_variable = { Kivotos_tech_cost_inf = Kivotos_tech_cost_inf_factor }
	set_temp_variable = { Kivotos_tech_cost_art = Kivotos_tech_cost_art_factor }
	set_temp_variable = { Kivotos_tech_cost_mot = Kivotos_tech_cost_mot_factor }
	set_temp_variable = { Kivotos_tech_cost_tra = Kivotos_tech_cost_tra_factor }
	set_temp_variable = { Kivotos_tech_cost_sup = Kivotos_tech_cost_sup_factor }
	set_temp_variable = { Kivotos_tech_cost_arm = Kivotos_tech_cost_arm_factor }
	set_temp_variable = { Kivotos_tech_cost_air = Kivotos_tech_cost_air_factor }
	set_temp_variable = { Kivotos_tech_cost_nvy = Kivotos_tech_cost_nvy_factor }
	set_temp_variable = { Kivotos_tech_cost_ind = Kivotos_tech_cost_ind_factor }
	set_temp_variable = { Kivotos_tech_cost_ele = Kivotos_tech_cost_ele_factor }
	add_to_temp_variable = { Kivotos_tech_cost_base = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_inf = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_art = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_mot = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_tra = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_sup = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_arm = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_air = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_nvy = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_ind = 1 }
	add_to_temp_variable = { Kivotos_tech_cost_ele = 1 }

	multiply_temp_variable = { var_1 = Kivotos_tech_cost_base }
	if = {
		limit = { check_variable = { tech_type = 1 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_inf }
	}
	if = {
		limit = { check_variable = { tech_type = 2 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_art }
	}
	if = {
		limit = { check_variable = { tech_type = 3 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_mot }
	}
	if = {
		limit = { check_variable = { tech_type = 4 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_tra }
	}
	if = {
		limit = { check_variable = { tech_type = 5 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_sup }
	}
	if = {
		limit = { check_variable = { tech_type = 6 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_arm }
	}
	if = {
		limit = { check_variable = { tech_type = 7 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_air }
	}
	if = {
		limit = { check_variable = { tech_type = 8 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_nvy }
	}
	if = {
		limit = { check_variable = { tech_type = 9 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_ind }
	}
	if = {
		limit = { check_variable = { tech_type = 10 } }
		multiply_temp_variable = { var_1 = Kivotos_tech_cost_ele }
	}
}
# 人力上限检测
Kivotos_check_manpower_limit_effect = {
	#################################################人力与机器人库存上限
	set_temp_variable = {#民用工厂数量 var_1
		var_1 = num_of_civilian_factories
	}
	set_temp_variable = {#消费品工厂比例 var_2
		var_2 = modifier@consumer_goods_factor
	}
	multiply_temp_variable = {#获取消费品工厂数量
		var_2 = var_1
	}
	multiply_temp_variable = {#计算所有工厂提供的数值
		var_1 = 5
	}
	multiply_temp_variable = {#额外计算一次消费品工厂提供数值
		var_2 = 5
	}
	add_to_variable = {#二者相加
		var_1 = var_2
	}
	set_temp_variable = {#将上述数值设为人力上限临时数值以供计算
		Kivotos_manpower_limit_num_temp = var_1
	}
	set_temp_variable = {#设置人力上限基础值100%
		Kivotos_manpower_limit_factor_temp = 1
	}
	add_to_temp_variable = {#将基础修正与额外修正相加得到修正值
		Kivotos_manpower_limit_factor_temp = Kivotos_manpower_limit_factor
	}
	multiply_temp_variable = {#将临时数值乘以修正值得到最终人力上限
		Kivotos_manpower_limit_num_temp = Kivotos_manpower_limit_factor_temp
	}
	add_to_temp_variable = {#基础
		Kivotos_manpower_limit_num_temp = 5
	} 
	add_to_temp_variable = {#额外
		Kivotos_manpower_limit_num_temp = Kivotos_additional_manpower_limit
	} 
	set_variable = {#设置人力上限
		Kivotos_manpower_limit = Kivotos_manpower_limit_num_temp
	}
	set_temp_variable = {#设置临时机器人上限数值
		Kivotos_robot_limit_num_temp = var_1
	}
	set_temp_variable = {#如上设置基础修正
		Kivotos_robot_limit_factor_temp = 1
	}
	add_to_temp_variable = {#如上计算最终修正
		Kivotos_robot_limit_factor_temp = Kivotos_robot_limit_factor
	}
	multiply_temp_variable = {#如上获得最终机器人上限
		Kivotos_robot_limit_num_temp = Kivotos_robot_limit_factor_temp
	}
	add_to_temp_variable = {#基础
		Kivotos_robot_limit_num_temp = 5
	} 
	add_to_temp_variable = {#额外
		Kivotos_robot_limit_num_temp = Kivotos_additional_robot_limit
	} 
	set_variable = {#设置机器人上限
		Kivotos_robot_limit = Kivotos_robot_limit_num_temp
	}
	#################################################师上限
	set_temp_variable = {#军工数量
		num_of_military_factories_temp = num_of_military_factories
	}
	divide_temp_variable = {
		num_of_military_factories_temp = 2
	}
	set_temp_variable = {#军工数量
		var_1 = num_of_military_factories_temp
	}
	add_to_temp_variable = {#基础
		var_1 = 10
	} 
	add_to_temp_variable = {#额外
		var_1 = Kivotos_additional_division_limit
	} 
	set_temp_variable = {#上限修正
		var_2 = Kivotos_division_limit_factor
	}
	add_to_temp_variable = {
		var_2 = 1
	}
	multiply_temp_variable = {
		var_1 = var_2
	}
	set_variable = {
		Kivotos_division_limit = var_1
	}
	#################################################检测师溢出（和上面差不多，英文变量按字面理解意思就行
	if = {
		limit = {#如果师数量超限
			num_divisions > Kivotos_division_limit
		}
		set_temp_variable = {#计算惩罚
			var_1 = num_divisions
		}
		set_temp_variable = {
			var_2 = Kivotos_division_limit
		}
		subtract_from_temp_variable = {
			var_1 = var_2
		}
		divide_temp_variable = {
			var_1 = var_2
		}
		multiply_temp_variable = {
			var_1 = -1
		}
		set_variable = {#将惩罚值设为固定变量
			Kivotos_division_overflow_factor = var_1
		}
		add_dynamic_modifier = {#添加动态修正
			modifier = Kivotos_division_overflow_dm
		}
		else_if = {
			limit = {
				has_dynamic_modifier = {
					modifier = Kivotos_division_overflow_dm
					scope = ROOT
				}
			}
			set_variable = {#如果没有超限，则重置惩罚值，且移除动态修正
				Kivotos_division_overflow_factor = 0
			}
			remove_dynamic_modifier = {
				modifier = Kivotos_division_overflow_dm
			}
		}
	}
	Kivotos_student_army_num_check = yes
	Kivotos_student_army_limit_check = yes
	hidden_effect = {#重置该决议
		activate_mission = Kivotos_check_manpower_limit
	}
}
# 机器定时转化人力
Kivotos_robot_to_manpower_all_time_effect = {
	if = {
		limit = {#如果人力值在加上所有库存机器人时未超过人力值上限
			set_temp_variable = {
				Kivotos_to_be_manpower = max_available_manpower_k
			}
			set_temp_variable = {
				Kivotos_robot_num_temp = num_equipment@Kivotos_robot
			}
			divide_temp_variable = {
				Kivotos_robot_num_temp = 1000
			}
			add_to_temp_variable = {
				Kivotos_to_be_manpower = Kivotos_robot_num_temp
			}
			check_variable = {
				var = Kivotos_to_be_manpower
				value = Kivotos_manpower_limit
				compare = less_than_or_equals
			}
		}
		set_temp_variable = {#则转化所有机器人为人力
			var_1 = num_equipment@Kivotos_robot
		}
		add_manpower = var_1
		multiply_temp_variable = {
			var_1 = -1
		}
		add_equipment_to_stockpile = {
			type = Kivotos_robot
			amount = var_1
		}
		else = {#如果人力值在加上所有库存机器人超过了人力上限
			set_temp_variable = {#已知将会超过上限，设置VAR1为上限值
				var_1 = Kivotos_manpower_limit
			}
			multiply_temp_variable = {
				var_1 = 1000
			}
			subtract_from_temp_variable = {#然后减去已有的人力值，得到抵达上限需要的值
				var_1 = max_available_manpower
			}

			add_manpower = var_1
			multiply_temp_variable = {
				var_1 = -1
			}
			add_equipment_to_stockpile = {
				type = Kivotos_robot
				amount = var_1
			}
		}
	}
	activate_mission = Kivotos_robot_to_manpower_all_time
}
# 机器转化人力
Kivotos_robot_to_manpower_all_effect = {
	if = {
		limit = {#如果人力值在加上所有库存机器人时未超过人力值上限
			set_temp_variable = {
				Kivotos_to_be_manpower = max_available_manpower_k
			}
			set_temp_variable = {
				Kivotos_robot_num_temp = num_equipment@Kivotos_robot
			}
			divide_temp_variable = {
				Kivotos_robot_num_temp = 1000
			}
			add_to_temp_variable = {
				Kivotos_to_be_manpower = Kivotos_robot_num_temp
			}
			check_variable = {
				var = Kivotos_to_be_manpower
				value = Kivotos_manpower_limit
				compare = less_than_or_equals
			}
		}
		set_temp_variable = {#则转化所有机器人为人力
			var_1 = num_equipment@Kivotos_robot
		}
		add_manpower = var_1
		multiply_temp_variable = {
			var_1 = -1
		}
		add_equipment_to_stockpile = {
			type = Kivotos_robot
			amount = var_1
		}
		else = {#如果人力值在加上所有库存机器人超过了人力上限
			set_temp_variable = {#已知将会超过上限，设置VAR1为上限值
				var_1 = Kivotos_manpower_limit
			}
			multiply_temp_variable = {
				var_1 = 1000
			}
			subtract_from_temp_variable = {#然后减去已有的人力值，得到抵达上限需要的值
				var_1 = max_available_manpower
			}

			add_manpower = var_1
			multiply_temp_variable = {
				var_1 = -1
			}
			add_equipment_to_stockpile = {
				type = Kivotos_robot
				amount = var_1
			}
		}
	}
}
# 事件占位符
Kivotos_event_null = {
	custom_effect_tooltip = Kivotos_event_placeholder
}
# 检测核心地区工厂
Kivotos_factory_additional = {
	custom_effect_tooltip = Kivotos_factory_additional_tt
	hidden_effect = {
		IF = {
			limit = {
				has_idea = Kivotos_economy
			}
			multiply_variable = { Kivotos_factory_additional_civilian = -1 }
			multiply_variable = { Kivotos_factory_additional_military = -1 }
			add_offsite_building = { type = industrial_complex level = Kivotos_factory_additional_civilian }
			add_offsite_building = { type = arms_factory level = Kivotos_factory_additional_military }
		
			set_variable = { Kivotos_factory_additional_civilian = 0 }
			set_variable = { Kivotos_factory_additional_military = 0 }
		
			every_state = {
				limit = {
					is_core_of = ROOT
					is_owned_and_controlled_by = ROOT
				}
				ROOT = {
					add_to_variable = { Kivotos_factory_additional_civilian = PREV.building_level@industrial_complex }
					add_to_variable = { Kivotos_factory_additional_military = PREV.building_level@arms_factory }
				}
			}
			add_offsite_building = { type = industrial_complex level = Kivotos_factory_additional_civilian }
			add_offsite_building = { type = arms_factory level = Kivotos_factory_additional_military }
			if = {
				limit = {
					has_country_flag = Kivotos_factory_reset
				}
				clr_country_flag = Kivotos_factory_reset
			}
		}
		else_if = {
			limit = {
				NOT = { has_country_flag = Kivotos_factory_reset }
			}
			multiply_variable = { Kivotos_factory_additional_civilian = -1 }
			multiply_variable = { Kivotos_factory_additional_military = -1 }
			add_offsite_building = { type = industrial_complex level = Kivotos_factory_additional_civilian }
			add_offsite_building = { type = arms_factory level = Kivotos_factory_additional_military }
			set_country_flag = Kivotos_factory_reset
		}
	}
}
#统计学生军营的数量
Kivotos_student_army_num_check = {
	set_variable = { Kivotos_student_army_num = 0 }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_infantry_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_motorized_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_mechanized_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_light_armor_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_medium_armor_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_heavy_armor_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_modern_armor_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_super_heavy_armor_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_base_support_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_normal_support_battle_group }
	add_to_variable = { Kivotos_student_army_num = num_battalions_with_type@KS_artillery_support_battle_group }
	add_to_variable = { Kivotos_student_army_num = Kivotos_student_army_temp }
}
#统计实际可用营数 
Kivotos_student_army_limit_check = {
	set_variable = { Kivotos_student_army_limit_true = Kivotos_student_army_limit }
	multiply_variable = { Kivotos_student_army_limit_true = Kivotos_student_army_limit_factor }
	IF = {
		limit = { check_variable = { Kivotos_student_army_limit_true > Kivotos_student_army_limit } }
		set_variable = { Kivotos_student_army_limit_true = Kivotos_student_army_limit }
	}
}
Kivotos_union_leader_vote_result_num_check = {
	hidden_effect = {
		set_variable = { global.union_leader_vote_result_num = 0 }
		set_variable = { global.leader_vote_disapprove_num = 0 }
		set_variable = { global.leader_vote_agree_num = 0 }
		every_country = {
			limit = {
				Kivotos_is_kivotos_country = yes
			}
			if = {
				limit = { has_country_flag = leader_vote_disapprove }
				add_to_variable = { global.leader_vote_disapprove_num = 1 }
			}
			if = {
				limit = { 
					has_country_flag = Kivotos_vote_yes
					NOT = {
						has_country_flag = leader_vote_disapprove 
						has_country_flag = leader_vote_veto
					}
				}
				add_to_variable = { global.leader_vote_agree_num = 1 }
			}
		}
		IF = {
			limit = {
				all_other_country = {
					OR = {
						check_variable = { Influence = ROOT.Influence }
						check_variable = { Influence < ROOT.Influence }
					}
				}
			}
			every_country = {
				clr_country_flag = Kivotos_union_leader_token
				clr_country_flag = Kivotos_union_leader_same
			}
			every_other_country = {
				clr_country_flag = Kivotos_union_leader_token_temp
			}
			set_country_flag = Kivotos_union_leader_same
			every_country = {
				limit = {
					check_variable = { Influence = ROOT.Influence }
				}
				set_country_flag = Kivotos_union_leader_same
			}
		}
		IF = {
			limit = {
				all_other_country = {
					check_variable = { Influence < ROOT.Influence }
				}
				NOT = { has_country_flag = Kivotos_union_leader_token }
			}
			IF = {
				limit = { 
					NOT = { has_country_flag = Kivotos_union_leader_token_temp }
				}
				every_country = {
					clr_country_flag = Kivotos_union_leader_token
					clr_country_flag = leader_vote_disapprove
					clr_country_flag = leader_vote_veto
					clr_country_flag = Kivotos_union_leader_token_temp
					clr_country_flag = Kivotos_union_leader_waive_ai_flag 
				}
			}
			every_country = {
				clr_country_flag = Kivotos_union_leader_same
			}
			set_country_flag = Kivotos_union_leader_token
			set_country_flag = Kivotos_union_leader_token_temp
		}
		IF = {
			limit = {
				any_country = {
					has_country_flag = Kivotos_union_leader_token
					check_variable = { Hardliners > 0.8 }
					any_other_country = {
						NOT = { has_country_flag = leader_vote_veto }
					}
					check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
				}
			}
			set_variable = { global.union_leader_vote_result_num = 2 }
			else_if = {
				limit = {
					any_country = {
						has_country_flag = Kivotos_union_leader_token
						check_variable = { Hardliners > 0.6 }
						any_other_country = {
							NOT = { has_country_flag = leader_vote_veto }
						}
						check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
					}
				}
				set_variable = { global.union_leader_vote_result_num = 3 }
				else_if = {
					limit = {
						any_country = {
							has_country_flag = Kivotos_union_leader_token
							check_variable = { Hardliners > 0.4 }
							any_other_country = {
								NOT = { has_country_flag = leader_vote_veto }
							}
							check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
						}
					}
					set_variable = { global.union_leader_vote_result_num = 4 }
					else_if = {
						limit = {
							any_country = {
								has_country_flag = Kivotos_union_leader_token
								check_variable = { Hardliners > 0.2 }
								any_other_country = {
									NOT = { has_country_flag = leader_vote_veto }
								}
								check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
							}
						}
						set_variable = { global.union_leader_vote_result_num = 5 }
						else_if = {
							limit = {
								any_country = {
									has_country_flag = Kivotos_union_leader_token
									any_other_country = {
										NOT = { has_country_flag = leader_vote_veto }
									}
									check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
								}
							}
							set_variable = { global.union_leader_vote_result_num = 6 }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				OR = {
					NOT = {
						check_variable = { global.leader_vote_disapprove_num < global.leader_vote_agree_num }
					}
					any_country = {
						NOT = { check_variable = { Hardliners > 0.6 } }
						has_country_flag = leader_vote_veto
					}
				}
			}
			set_variable = { global.union_leader_vote_result_num = 0 }
		}
		IF = {
			limit = {
				OR = {
					any_country = {
						any_other_country = {
							check_variable = { Hardliners > 0.6 }
							has_country_flag = leader_vote_same
						}
						check_variable = { Hardliners > 0.6 }
						has_country_flag = leader_vote_same
					}
					any_country = {
						check_variable = { Hardliners > 0.6 }
						has_country_flag = leader_vote_veto
					}
				}
			}
			set_variable = { global.union_leader_vote_result_num = 1 }
		}
	}
}
Kivotos_union_leader_vote_end_result_effect = {
	IF = {
		limit = {
			NOT = {
				has_global_flag = Kivotos_union_leader_vote_result_effect_end
			}
		}
		IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DISSOLVE }
					AND = {
						NOT = { has_game_rule = { rule = Kivotos_union_leader_vote_effect option = CIVIL_WAR } }
						check_variable = { global.union_leader_vote_result_num = 0 } #解散
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					Kivotos_is_kivotos_country = yes
					is_faction_leader = yes
					any_other_country = {
						is_in_faction_with = PREV
						has_country_flag = Kivotos_vote_yes
					}
				}
				dismantle_faction = yes
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = CIVIL_WAR }
					AND = {
						check_variable = { global.union_leader_vote_result_num = 1 } #内战
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					Kivotos_is_kivotos_country = yes
					is_faction_leader = yes
					any_other_country = {
						is_in_faction_with = PREV
						has_country_flag = Kivotos_vote_yes
					}
				}
				dismantle_faction = yes
			}
			every_country = {
				limit = {
					has_country_flag = Kivotos_vote_yes
				}
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					declare_war_on = {
						target = PREV
						type = civil_war
					}
				}
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = PERFECT }
					AND = {
						has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DEFAULT }
						check_variable = { global.union_leader_vote_result_num = 2 } #完美
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					has_country_flag = Kivotos_union_leader_token
				}
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					every_core_state = {
						add_core_of = PREV.PREV
					}
					random_country = {
						limit = {
							has_country_flag = Kivotos_union_leader_token
						}
						annex_country = {
							target = PREV
						}
					}
				}
				every_state = {
					limit = {
						is_core_of = KVO
						NOT = { is_core_of = SCH }
					}
					transfer_state_to = PREV
				}
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = VERY_GOOD }
					AND = {
						has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DEFAULT }
						check_variable = { global.union_leader_vote_result_num = 3 } #好
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					has_country_flag = Kivotos_union_leader_token
				}
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					every_core_state = {
						add_core_of = PREV.PREV
						add_dynamic_modifier = {
							modifier = Kivotos_state_autonomy_modifier
						}
					}
					random_country = {
						limit = {
							has_country_flag = Kivotos_union_leader_token
						}
						annex_country = {
							target = PREV
						}
					}
				}
				every_state = {
					limit = {
						is_core_of = KVO
						NOT = { is_core_of = SCH }
					}
					transfer_state_to = PREV
				}
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = GOOD }
					AND = {
						has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DEFAULT }
						check_variable = { global.union_leader_vote_result_num = 4 } #一般
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					Kivotos_is_kivotos_country = yes
					is_faction_leader = yes
					any_other_country = {
						is_in_faction_with = PREV
						has_country_flag = Kivotos_vote_yes
					}
				}
				dismantle_faction = yes
			}
			random_country = {
				limit = {
					has_country_flag = Kivotos_union_leader_token
				}
				create_faction = Kivotos_Union
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					random_country = {
						limit = {
							has_country_flag = Kivotos_union_leader_token
						}
						add_to_faction = PREV
						set_autonomy = {
							target = PREV
							autonomy_state = Kivotos_integrated_school #提醒自己后续记得做一下傀儡类型
						}
					}
				}
				every_state = {
					limit = {
						is_core_of = KVO
						NOT = { is_core_of = SCH }
					}
					transfer_state_to = PREV
				}
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = BAD }
					AND = {
						has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DEFAULT }
						check_variable = { global.union_leader_vote_result_num = 5 } #差
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					Kivotos_is_kivotos_country = yes
					is_faction_leader = yes
					any_other_country = {
						is_in_faction_with = PREV
						has_country_flag = Kivotos_vote_yes
					}
				}
				dismantle_faction = yes
			}
			random_country = {
				limit = {
					has_country_flag = Kivotos_union_leader_token
				}
				create_faction = Kivotos_Union
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					random_country = {
						limit = {
							has_country_flag = Kivotos_union_leader_token
						}
						add_to_faction = PREV
						set_autonomy = {
							target = PREV
							autonomy_state = Kivotos_autonomy_school #提醒自己后续记得做一下傀儡类型
						}
					}
				}
				every_state = {
					limit = {
						is_core_of = KVO
						NOT = { is_core_of = SCH }
					}
					transfer_state_to = PREV
				}
			}
		}
		ELSE_IF = {
			limit = {
				OR = {
					has_game_rule = { rule = Kivotos_union_leader_vote_effect option = VERY_BAD }
					AND = {
						has_game_rule = { rule = Kivotos_union_leader_vote_effect option = DEFAULT }
						check_variable = { global.union_leader_vote_result_num = 6 } #很差
						NOT = { has_global_flag = Kivotos_union_leader_vote_end_flag }
					}
				}
			}
			random_country = {
				limit = {
					Kivotos_is_kivotos_country = yes
					is_faction_leader = yes
					any_other_country = {
						is_in_faction_with = PREV
						has_country_flag = Kivotos_vote_yes
					}
				}
				dismantle_faction = yes
			}
			random_country = {
				limit = {
					has_country_flag = Kivotos_union_leader_token
				}
				create_faction = Kivotos_Union
				every_country = {
					limit = {
						has_country_flag = Kivotos_vote_yes
						NOT = { original_tag = PREV }
					}
					random_country = {
						limit = {
							has_country_flag = Kivotos_union_leader_token
						}
						add_to_faction = PREV
					}
				}
				every_state = {
					limit = {
						is_core_of = KVO
						NOT = { is_core_of = SCH }
					}
					transfer_state_to = PREV
				}
			}
		}
		set_global_flag = Kivotos_union_leader_vote_result_effect_end
	}
}

TRY_Factions_ideas_end = {
	IF = {
		limit = {
			has_idea = TRY_Factions_1
		}
		remove_ideas = TRY_Factions_1
		else_if = {
			limit = {
				has_idea = TRY_Factions_2
			}
			remove_ideas = TRY_Factions_2
			else_if = {
				limit = {
					has_idea = TRY_Factions_3
				}
				remove_ideas = TRY_Factions_3
			}
		}
	}
}
TRY_Factions_intensify = {
	IF = {
		limit = {
			has_idea = TRY_Factions_1
		}
		swap_ideas = {
			remove_idea = TRY_Factions_1
			add_idea = TRY_Factions_2
		}
		else_if = {
			limit = {
				has_idea = TRY_Factions_2
			}
			swap_ideas = {
				remove_idea = TRY_Factions_2
				add_idea = TRY_Factions_3
			}
			else_if = {
				limit = {
					has_idea = TRY_Factions_3
				}
				add_political_power = -50
				add_stability = -0.1
			}
		}
	}
}
TRY_factions_power_check_scripted_effect = {
	TRY_leader_power_check_subse = yes
	TRY_factions_power_check_subse = yes
	TRY_decision_opinion_check_subse = yes
}
#检测主办者与特殊特质
TRY_leader_power_check_subse = {
	set_variable = { TRY_F_power = 0 }
	set_variable = { TRY_S_power = 0 }
	set_variable = { TRY_P_power = 0 }
	set_variable = { TRY_SIS_power = 0 }
	set_variable = { TRY_H_power = 0 }
	set_variable = { TRY_J_power = 0 }
	set_variable = { TRY_A_power = 0 }
	set_variable = { TRY_Teaparty_power = 0 }
	
	if = {
		limit = {
			has_idea_with_trait = TRY_tea_party_F
		}
		set_variable = { TRY_F_power = stability }
		else_if = {
			limit = {
				has_idea_with_trait = TRY_tea_party_S
			}
			set_variable = { TRY_S_power = stability }
			else_if = {
				limit = {
					has_idea_with_trait = TRY_tea_party_P
				}
				set_variable = { TRY_P_power = stability }
				else_if = {
					limit = {
						has_idea_with_trait = TRY_tea_party_SIS
					}
					set_variable = { TRY_SIS_power = stability }
					else_if = {
						limit = {
							has_idea_with_trait = TRY_tea_party_H
						}
						set_variable = { TRY_H_power = stability }
						else_if = {
							limit = {
								has_idea_with_trait = TRY_tea_party_J
							}
							set_variable = { TRY_J_power = stability }
							# else_if = {
							# 	limit = {
							# 		has_idea_with_trait = TRY_tea_party_A
							# 	}
							# 	set_variable = { TRY_A_power = stability }
							# }
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_F_trait
		}
		add_to_variable = {
			TRY_F_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_S_trait
		}
		add_to_variable = {
			TRY_S_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_P_trait
		}
		add_to_variable = {
			TRY_P_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_SIS_trait
		}
		add_to_variable = {
			TRY_SIS_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_H_trait
		}
		add_to_variable = {
			TRY_H_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_J_trait
		}
		add_to_variable = {
			TRY_J_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_A_trait
		}
		add_to_variable = {
			TRY_A_power = 0.25
		}
	}
	if = {
		limit = {
			has_idea_with_trait = TRY_mika_trait
		}
		add_to_variable = {
			TRY_P_power = 0.25
		}
		add_to_variable = {
			TRY_A_power = 0.1
		}
	}
	add_to_variable = { TRY_F_power = TRY_F_additional_power }
	add_to_variable = { TRY_S_power = TRY_S_additional_power }
	add_to_variable = { TRY_P_power = TRY_P_additional_power }
	add_to_variable = { TRY_SIS_power = TRY_SIS_additional_power }
	add_to_variable = { TRY_H_power = TRY_H_additional_power }
	add_to_variable = { TRY_J_power = TRY_J_additional_power }
	add_to_variable = { TRY_A_power = TRY_A_additional_power }
	add_to_variable = { TRY_Teaparty_power = TRY_Teaparty_additional_power }
	IF = {
		limit = {
			check_variable = { TRY_Teaparty_enable = 1 }
		}
		add_to_variable = { TRY_Teaparty_power = TRY_F_power }
		add_to_variable = { TRY_Teaparty_power = TRY_P_power }
		add_to_variable = { TRY_Teaparty_power = TRY_S_power }
	}
}
#检测力量占比
TRY_factions_power_check_subse = {
	if = {
		limit = {
            OR = {
                check_variable = { TRY_leader_num = 0 } 
                check_variable = { TRY_leader_num = 1 } 
                check_variable = { TRY_leader_num = 2 } 
            }
		}
		set_variable = {
			TRY_party_1_power = TRY_F_power
		}
		set_temp_variable = {
			var_1 = TRY_F_power
		}
	}
	if = {
		limit = {
            check_variable = { TRY_leader_num = 3 } 
		}
		set_variable = {
			TRY_party_1_power = TRY_Teaparty_power
		}
		set_temp_variable = {
			var_1 = TRY_Teaparty_power
		}
	}
	if = {
		limit = {
            OR = {
                check_variable = { TRY_leader_num = 0 } 
                check_variable = { TRY_leader_num = 1 } 
                check_variable = { TRY_leader_num = 2 } 
            }
		}
		set_variable = {
			TRY_party_2_power = TRY_S_power
		}
		add_to_temp_variable = {
			var_1 = TRY_S_power
		}
	}
	if = {
		limit = {
            check_variable = { TRY_leader_num = 3 } 
		}
		set_variable = {
			TRY_party_2_power = TRY_SIS_power
		}
		add_to_temp_variable = {
			var_1 = TRY_SIS_power
		}
	}
	if = {
		limit = {
            OR = {
                check_variable = { TRY_leader_num = 0 } 
                check_variable = { TRY_leader_num = 1 } 
                check_variable = { TRY_leader_num = 2 } 
            }
		}
		set_variable = {
			TRY_party_3_power = TRY_P_power
		}
		add_to_temp_variable = {
			var_1 = TRY_P_power
		}
	}
	if = {
		limit = {
            check_variable = { TRY_leader_num = 3 } 
		}
		set_variable = {
			TRY_party_3_power = TRY_H_power
		}
		add_to_temp_variable = {
			var_1 = TRY_H_power
		}
	}
	divide_variable = {
		TRY_party_1_power = var_1
	}
	divide_variable = {
		TRY_party_2_power = var_1
	}
	divide_variable = {
		TRY_party_3_power = var_1
	}

	if = {
		limit = {
			check_variable = {
				TRY_other_faction_1_num = 0
			}
		}
		set_variable = {
			TRY_get_other_faction_1_power = TRY_J_power
		}
		add_to_temp_variable = {
			var_1 = TRY_J_power
		}
	}
	if = {
		limit = {
			check_variable = {
				TRY_other_faction_2_num = 0
			}
		}
		set_variable = {
			TRY_get_other_faction_2_power = TRY_SIS_power
		}
		add_to_temp_variable = {
			var_1 = TRY_SIS_power
		}
	}
	if = {
		limit = {
			check_variable = {
				TRY_other_faction_3_num = 0
			}
		}
		set_variable = {
			TRY_get_other_faction_3_power = TRY_H_power
		}
		add_to_temp_variable = {
			var_1 = TRY_H_power
		}
	}
	if = {
		limit = {
			check_variable = {
				TRY_A_enable = 1
			}
		}
		add_to_temp_variable = {
			var_1 = TRY_A_power
		}
	}

	divide_variable = {
		TRY_get_other_faction_1_power = var_1
	}
	divide_variable = {
		TRY_get_other_faction_2_power = var_1
	}
	divide_variable = {
		TRY_get_other_faction_3_power = var_1
	}
}
#检测事务支持率
TRY_decision_opinion_check_subse = {
	set_variable = { TRY_decision_support = 0 }
	set_variable = { TRY_decision_oppose = 0 }
	set_variable = { TRY_decision_neutrality = 0 }
	if = {
		limit = {
			check_variable = { TRY_F_opinion = 1 }
			NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
		}
		add_to_variable = { TRY_decision_support = TRY_F_power }
		else_if = {
			limit = {
				check_variable = { TRY_F_opinion = 2 }
				NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
			}
			add_to_variable = { TRY_decision_oppose = TRY_F_power }
			else_if = {
				limit = { NOT = { check_variable = { TRY_Teaparty_enable = 1 } } }
				add_to_variable = { TRY_decision_neutrality = TRY_F_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_S_opinion = 1 }
			NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
		}
		add_to_variable = { TRY_decision_support = TRY_S_power }
		else_if = {
			limit = {
				check_variable = { TRY_S_opinion = 2 }
				NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
			}
			add_to_variable = { TRY_decision_oppose = TRY_S_power }
			else_if = {
				limit = { NOT = { check_variable = { TRY_Teaparty_enable = 1 } } }
				add_to_variable = { TRY_decision_neutrality = TRY_S_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_P_opinion = 1 }
			NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
		}
		add_to_variable = { TRY_decision_support = TRY_P_power }
		else_if = {
			limit = {
				check_variable = { TRY_P_opinion = 2 }
				NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
			}
			add_to_variable = { TRY_decision_oppose = TRY_P_power }
			else_if = {
				limit = {
					NOT = { check_variable = { TRY_Teaparty_enable = 1 } }
				}
				add_to_variable = { TRY_decision_neutrality = TRY_P_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_Teaparty_opinion = 1 }
			check_variable = { TRY_Teaparty_enable = 1 }
		}
		add_to_variable = { TRY_decision_support = TRY_Teaparty_power }
		else_if = {
			limit = {
				check_variable = { TRY_Teaparty_opinion = 2 }
				check_variable = { TRY_Teaparty_enable = 1 }
			}
			add_to_variable = { TRY_decision_oppose = TRY_Teaparty_power }
			else_if = {
				limit = {
					check_variable = { TRY_Teaparty_enable = 1 }
				}
				add_to_variable = { TRY_decision_neutrality = TRY_Teaparty_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_SIS_opinion = 1 }
		}
		add_to_variable = { TRY_decision_support = TRY_SIS_power }
		else_if = {
			limit = {
				check_variable = { TRY_SIS_opinion = 2 }
			}
			add_to_variable = { TRY_decision_oppose = TRY_SIS_power }
			else = {
				add_to_variable = { TRY_decision_neutrality = TRY_SIS_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_H_opinion = 1 }
		}
		add_to_variable = { TRY_decision_support = TRY_H_power }
		else_if = {
			limit = {
				check_variable = { TRY_H_opinion = 2 }
			}
			add_to_variable = { TRY_decision_oppose = TRY_H_power }
			else = {
				add_to_variable = { TRY_decision_neutrality = TRY_H_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_J_opinion = 1 }
		}
		add_to_variable = { TRY_decision_support = TRY_J_power }
		else_if = {
			limit = {
				check_variable = { TRY_J_opinion = 2 }
			}
			add_to_variable = { TRY_decision_oppose = TRY_J_power }
			else = {
				add_to_variable = { TRY_decision_neutrality = TRY_J_power }
			}
		}
	}
	if = {
		limit = {
			check_variable = { TRY_A_opinion = 1 }
			check_variable = { TRY_A_enable = 1 }
		}
		add_to_variable = { TRY_decision_support = TRY_A_power }
		else_if = {
			limit = {
				check_variable = { TRY_A_opinion = 2 }
				check_variable = { TRY_A_enable = 1 }
			}
			add_to_variable = { TRY_decision_oppose = TRY_A_power }
			else_if = {
				limit = {
					check_variable = { TRY_A_enable = 1 }
				}
				add_to_variable = { TRY_decision_neutrality = TRY_A_power }
			}
		}
	}
	set_temp_variable = {
		var_1 = TRY_decision_support
	}
	add_to_temp_variable = {
		var_1 = TRY_decision_oppose
	}
	add_to_temp_variable = {
		var_1 = TRY_decision_neutrality
	}
	divide_variable = {
		TRY_decision_support = var_1
	}
	divide_variable = {
		TRY_decision_oppose = var_1
	}
	divide_variable = {
		TRY_decision_neutrality = var_1
	}
}
#色彩侵蚀地块检测
ABY_color_erosion_check_state = {
	every_possible_country = {
		limit = { 
			NOT = { original_tag = ABY } 
			FROM = { is_core_of = PREV }
		}
		FROM = { remove_core_of = PREV }
	}
	IF = { 
		limit = { FROM = { NOT = { is_core_of = ROOT } } } 
		FROM = { add_core_of = ROOT }
	}
	set_temp_variable = { temp_manpower = FROM.state_population_k }
	IF = {
		limit = { 
			FROM = {
				any_country_with_core = {
					Kivotos_is_kivotos_country = yes
				}
			}
		}
		multiply_temp_variable = { temp_manpower = 1000 }
	}
	ELSE = {
		multiply_temp_variable = { temp_manpower = 20 }
	}
	add_manpower = temp_manpower
	set_temp_variable = { temp_manpower = FROM.state_population_k }
	add_to_temp_variable = { temp_point = temp_manpower }
	divide_temp_variable = { temp_manpower = 20 }
	multiply_temp_variable = { temp_manpower = -1000 }
	ABY_color_erosion_check_remove_manpower = yes
	set_temp_variable = { temp_build = FROM.arms_factory_level }
	set_temp_variable = { temp_build_point = temp_build }
	multiply_temp_variable = { temp_build_point = 300 }
	add_to_temp_variable = { temp_point = temp_build_point }
	FROM = {
		remove_building = {
			type = arms_factory
			level = temp_build
		}
	}
	set_temp_variable = { temp_build = FROM.industrial_complex_level }
	set_temp_variable = { temp_build_point = temp_build }
	multiply_temp_variable = { temp_build_point = 500 }
	add_to_temp_variable = { temp_point = temp_build_point }
	FROM = {
		remove_building = {
			type = industrial_complex
			level = temp_build
		}
	}
	set_temp_variable = { temp_build = FROM.infrastructure_level }
	set_temp_variable = { temp_build_point = temp_build }
	multiply_temp_variable = { temp_build_point = 100 }
	add_to_temp_variable = { temp_point = temp_build_point }
	FROM = {
		remove_building = {
			type = infrastructure
			level = temp_build
		}
	}
	set_temp_variable = { temp_resource = FROM.resource@steel }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 5 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = steel
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@aluminium }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = aluminium
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@tungsten }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = tungsten
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@rubber }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = rubber
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@oil }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = oil
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@chromium }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = chromium
		amount = temp_resource
		state = FROM
	}
	set_temp_variable = { temp_resource = FROM.resource@originium }
	set_temp_variable = { temp_resource_point = temp_resource }
	multiply_temp_variable = { temp_resource_point = 10 }
	add_to_temp_variable = { temp_point = temp_resource_point }
	multiply_temp_variable = { temp_resource = -1 }
	add_resource = {
		type = originium
		amount = temp_resource
		state = FROM
	}
	IF = {
		limit = { 
			FROM = {
				any_country_with_core = {
					Kivotos_is_kivotos_country = yes
				}
			}
		}
		add_to_temp_variable = { temp_point = 1000 }
	}
	ELSE = {
		divide_temp_variable = { temp_point = 2 }
		add_to_temp_variable = { temp_point = 200 }
	}
	IF = { limit = { check_variable = { temp_point > 5000 } } set_temp_variable = { temp_point = 5000 } }
	FROM = { set_state_category = zero } 
}

ABY_color_erosion_check_remove_manpower = {
	hidden_effect = {
		FROM = {
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = temp_manpower
			add_manpower = -100
			add_manpower = 1
		}
	}
	custom_effect_tooltip = ABY_color_erosion_check_remove_manpower_tt
}
