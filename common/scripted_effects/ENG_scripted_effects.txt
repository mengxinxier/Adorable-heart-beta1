##ENG圣杯预设
#一般的
	ENG_yiyuan_icon_frames = {   #圣杯议会的gui图变化+计算议会支持
		set_variable = {
			VAR_ENG_syy_support = VAR_ENG_syy_support_jc
		}
		add_to_variable = { 
			VAR_ENG_syy_support = VAR_ENG_syy_support_ewxg 
		}
		set_variable = {
			VAR_ENG_xyy_support = VAR_ENG_xyy_support_jc
		}	
		add_to_variable = { 
			VAR_ENG_xyy_support = ENG_VAR_ewzc_xyyxw  
		}
		add_to_variable = { 
			VAR_ENG_xyy_support = ENG_VAR_ewzc_dqzcl  
		}
		add_to_variable = { 
			VAR_ENG_xyy_support = VAR_ENG_xyy_support_ewxg 
		}
		VAR_ENG_syy_support_clamp = yes
		VAR_ENG_xyy_support_clamp = yes
		#图片变化
		set_temp_variable = { ENG_syy_support_temp = VAR_ENG_syy_support }
		divide_temp_variable = { ENG_syy_support_temp = VAR_ENG_syy_support_total }
		multiply_temp_variable = { ENG_syy_support_temp = 21 }
		if = {
			limit = { check_variable = { ENG_syy_support_temp > 0 } }
			clamp_temp_variable = {
				var = ENG_syy_support_temp
				min = 1
				max = 21
			}
		}
		else = {
			set_temp_variable = { ENG_syy_support_temp = 1 }
		}
		set_variable = { 
			ENG_current_shangyiyuan_icon_frame = ENG_syy_support_temp 
		}

		set_temp_variable = { ENG_xyy_support_temp = VAR_ENG_xyy_support }
		divide_temp_variable = { ENG_xyy_support_temp = VAR_ENG_xyy_support_total }
		multiply_temp_variable = { ENG_xyy_support_temp = 21 }
		if = {
			limit = { check_variable = { ENG_xyy_support_temp > 0 } }
			clamp_temp_variable = {
				var = ENG_xyy_support_temp
				min = 1
				max = 21
			}
		}
		else = {
			set_temp_variable = { ENG_xyy_support_temp = 1 }		
		}
		set_variable = {
			ENG_current_xiayiyuan_icon_frame = ENG_xyy_support_temp 
		}
	}
	VAR_ENG_wjcd_clamp = { #限制大萧条危机程度的大小
		clamp_variable = {
			var = VAR_ENG_wjcd
			min = 0
			max = 100
		}
	}
	VAR_ENG_syrs_clamp = {  #限制大萧条失业人数的大小
		clamp_variable = {
			var = VAR_ENG_syrs
			min = 0
			max = 9999
		}
	}
	VAR_ENG_syy_support_clamp = {  #限制上议院(贵族院)支持
		clamp_variable = {
			var = VAR_ENG_syy_support
			min = 0
			max = 120
		}
	}
	VAR_ENG_xyy_support_clamp = {  #限制下议院(平民院)支持
		clamp_variable = {
			var = VAR_ENG_xyy_support
			min = 0
			max = 600
		}
	}
	VAR_ENG_jisuan_influence_jijindu = { #影响力和激进度相关计算合集
		VAR_ENG_all_influence_clamp = yes
		VAR_ENG_all_jijindu_clamp = yes
		ENG_jisuan_all_support = yes
		ENG_jisuan_VAR_ewzc_dqzcl = yes
	}
	VAR_ENG_all_influence_clamp = { #限制各党派影响力
		clamp_variable = { #限制工党-保守党联盟支持度
			var = ENG_gongdang_baoshoudang_influence
			min = 0
			max = 200
		}
		clamp_variable = { #限制联合阵线支持度
			var = ENG_lianhezhenxian_influence
			min = 0
			max = 200
		}
		clamp_variable = { #限制圣杯皇室支持度
			var = ENG_sbhs_influence
			min = 0
			max = 200
		}
		clamp_variable = { #限制前进同盟支持度
			var = ENG_qjlm_influence
			min = 0
			max = 200
		}
	}
	VAR_ENG_all_jijindu_clamp  = { #限制各党派激进度
		clamp_variable = { #限制工党-保守党联盟激进度
			var = ENG_gongdang_baoshoudang_jijindu
			min = 0
			max = 100
		}
		clamp_variable = { #限制联合阵线激进度
			var = ENG_lianhezhenxian_jijindu
			min = 0
			max = 100
		}
		clamp_variable = { #限制圣杯皇室激进度
			var = ENG_sbhs_jijindu
			min = 0
			max = 100
		}
		clamp_variable = { #限制前进同盟激进度
			var = ENG_qjlm_jijindu
			min = 0
			max = 100
		}
	}
	ENG_jisuan_all_support = {  #计算各党派支持率
	 #计算各党派总影响力
		set_variable = {
			VAR_ENG_all_influence = ENG_lianhezhenxian_influence
		}
		add_to_variable = { 
			VAR_ENG_all_influence = ENG_gongdang_baoshoudang_influence  
		}
		add_to_variable = { 
			VAR_ENG_all_influence =  ENG_sbhs_influence  
		}
		add_to_variable = { 
			VAR_ENG_all_influence = ENG_qjlm_influence  
		}
	 #计算各党派支持
		set_variable = {
			ENG_lianhezhenxian_support = ENG_lianhezhenxian_influence
		}
		divide_variable = { 
			ENG_lianhezhenxian_support = VAR_ENG_all_influence 
		}
		
		set_variable = {
			ENG_gongdang_baoshoudang_support = ENG_gongdang_baoshoudang_influence
		}
		divide_variable = { 
			ENG_gongdang_baoshoudang_support = VAR_ENG_all_influence 
		}
		
		set_variable = {
			ENG_sbhs_support = ENG_sbhs_influence
		}
		divide_variable = { 
			ENG_sbhs_support = VAR_ENG_all_influence 
		}
		
		set_variable = {
			ENG_qjlm_support = ENG_qjlm_influence
		}
		divide_variable = { 
			ENG_qjlm_support = VAR_ENG_all_influence 
		}
	}
	ENG_jisuan_VAR_dxtdyx = { #计算大萧条的影响
		if = {
			limit = {
				has_country_flag = FLAG_ENG_daxiaotiao
			}
			set_variable = {
				ENG_VAR_dxtdyx_1 = VAR_ENG_wjcd
			}
		
			multiply_variable = {
				var = ENG_VAR_dxtdyx_1
				value = -0.01
			}
		
			set_variable = {
				ENG_VAR_dxtdyx_2 = VAR_ENG_syrs
			}
		
			multiply_variable = {  #
				var = ENG_VAR_dxtdyx_2
				value = 0.002
			}
		
			set_variable = { #大萧条影响
				ENG_VAR_dxtdyx = ENG_VAR_dxtdyx_1
			}
		
			multiply_variable = {
				var = ENG_VAR_dxtdyx
				value = ENG_VAR_dxtdyx_2
			}
		}
	}
	ENG_panduan_yxgyh = { #判断有限国有化民族精神
		if = {
			limit = { 
				has_idea = ENG_idea_yxgyh
			}
			swap_ideas = {
				remove_idea = ENG_idea_yxgyh
				add_idea = ENG_idea_yxgyh_2
			} 
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_yxgyh_2
			}
			swap_ideas = {
				remove_idea = ENG_idea_yxgyh_2
				add_idea = ENG_idea_yxgyh_3
			} 
			set_country_flag = FLAG_ENG_complet_gycz_gyh_2
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_yxgyh_3
			}
			swap_ideas = {
				remove_idea = ENG_idea_yxgyh_3
				add_idea = ENG_idea_yxgyh_4
			} 
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_yxgyh_4
			}
			swap_ideas = {
				remove_idea = ENG_idea_yxgyh_4
				add_idea = ENG_idea_yxgyh_5
			} 
		}
	}
	ENG_panduan_ldqy = { #判断垄断企业民族精神
		if = {
			limit = { 
				has_idea = ENG_idea_ldqy
			}
			swap_ideas = {
				remove_idea = ENG_idea_ldqy
				add_idea = ENG_idea_ldqy_2
			} 
			custom_effect_tooltip = ENG_tooltip_VAR_exincome_modifier_add_2
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_ldqy_2
			}
			swap_ideas = {
				remove_idea = ENG_idea_ldqy_2
				add_idea = ENG_idea_ldqy_3
			} 
			custom_effect_tooltip = ENG_tooltip_VAR_exincome_modifier_add_2
			set_country_flag = FLAG_ENG_complet_gycz_gyh_2
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_ldqy_3
			}
			swap_ideas = {
				remove_idea = ENG_idea_ldqy_3
				add_idea = ENG_idea_ldqy_4
			} 
			custom_effect_tooltip = ENG_tooltip_VAR_exincome_modifier_add_2
		}
		else_if = {
			limit = { 
				has_idea = ENG_idea_ldqy_4
			}
			swap_ideas = {
				remove_idea = ENG_idea_ldqy_4
				add_idea = ENG_idea_ldqy_5
			} 
			custom_effect_tooltip = ENG_tooltip_VAR_exincome_modifier_add_2
		}
	}
	ENG_jisuan_jbsc = { #军备生产相关计算
		set_variable = { #hcp花费
			ENG_VAR_jbsc_hcphf = 6
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_hcphf
			value = VAR_ENG_jhgs_gm #军火公司规模
		}
		set_variable = {
			ENG_VAR_jbsc_hcphf_2 = ENG_VAR_jbsc_hcphf
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_hcphf_2
			value = -1
		}

		set_variable = {
			ENG_VAR_jbsc_bbzb = 400
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_bbzb
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_hp = 50
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_hp
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_zyzb = 50
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_zyzb
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_kc = 80
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_kc
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_jxh = 30
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_jxh
			value = VAR_ENG_jhgs_gm
		}


		set_variable = {
			ENG_VAR_jbsc_ph = 8
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_ph
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_bte = 8
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_bte
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_sy = 8
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_sy
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_ds = 4
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_ds
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_zo = 4
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_zo
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_hlfks = 4
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_hlfks
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_at = 50
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_at
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_wks = 20
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_wks
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_szj = 14
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_szj
			value = VAR_ENG_jhgs_gm
		}
		set_variable = {
			ENG_VAR_jbsc_pdlg = 7
		}
		multiply_variable = {
			var = ENG_VAR_jbsc_pdlg
			value = VAR_ENG_jhgs_gm
		}

	}
    #金融相关
		ENG_panding_thpz = { #判定通胀影响
			hidden_effect = {
				if = {
					limit = {
						check_variable = { 
							VAR_ENG_tzl > 5
						}	
					}
					ENG_jisuan_VAR_thpzl = yes
					add_ideas = ENG_idea_thpz
				}
				else_if = {
					limit = {
						AND = {
							check_variable = { 
								VAR_ENG_tzl < 6
							}
							check_variable = { 
								VAR_ENG_tzl > -6
							}		
						}
					}
					set_variable = { ENG_VAR_thpzl_1 = 0 }
					set_variable = { ENG_VAR_thjsl_1 = 0 }
					remove_ideas = ENG_idea_thpz
					remove_ideas = ENG_idea_thjs
				}
				else_if = {
					limit = {
						check_variable = { 
							VAR_ENG_tzl < -5
						}	
					}
					ENG_jisuan_VAR_thjsl = yes
					add_ideas = ENG_idea_thjs
				}
			}
		}

		ENG_jisuan_VAR_thpzl = { #计算通胀的影响
			set_variable = {
				ENG_VAR_thpzl_1 = VAR_ENG_tzl
			}
			add_to_variable = { 
				ENG_VAR_thpzl_1 = -5
			}
			multiply_variable = {
				var = ENG_VAR_thpzl_1
				value = -0.03
			}
		}
		ENG_jisuan_VAR_thjsl = { #计算通缩的影响
			set_variable = {
				ENG_VAR_thjsl_1 = VAR_ENG_tzl
			}
			add_to_variable = { 
				ENG_VAR_thjsl_1 = 5
			}
			multiply_variable = {
				var = ENG_VAR_thjsl_1
				value = 0.03
			}
		}
		ENG_jisuan_sbwggz_lixi_1 = { #计算全年债券利息
			set_variable = {
				ENG_VAR_sbwggz_lixi = VAR_ENG_sbwggz_fxl
			}	
			multiply_variable = {
				var = ENG_VAR_sbwggz_lixi
				value = VAR_ENG_sbwggz_ll
			}
			multiply_variable = {
				var = ENG_VAR_sbwggz_lixi
				value = -1
			}
		}
		ENG_jisuan_sbwggz_lixi_2 = { #计算半年债券利息
			set_variable = {
				ENG_VAR_sbwggz_lixi = VAR_ENG_sbwggz_fxl
			}	
			multiply_variable = {
				var = ENG_VAR_sbwggz_lixi
				value = VAR_ENG_sbwggz_ll
			}
			multiply_variable = {
				var = ENG_VAR_sbwggz_lixi
				value = -0.5
			}
		}
		ENG_panding_sbwggz_cfrw = { #判定是否触发债券到期任务
			if = {
				limit = {
					NOT = {
						has_country_flag = FLAG_ENG_sbwggz_cfrw
					}
				}
				activate_mission = ENG_mission_sbwggz_daoqi
			}
		}

	ENG_jisuan_VAR_ewzc_xyyxw = { #计算由下议院席位获得的额外支持
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			set_variable = {
				ENG_VAR_ewzc_xyyxw = VAR_ENG_gdbsd_xw
			}
			multiply_variable = {
				var = ENG_VAR_ewzc_xyyxw
				value = 0.2
			}
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			set_variable = {
				ENG_VAR_ewzc_xyyxw = VAR_ENG_lhzx_xw
			}
			multiply_variable = {
				var = ENG_VAR_ewzc_xyyxw
				value = 0.2
			}
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			set_variable = {
				ENG_VAR_ewzc_xyyxw = VAR_ENG_sbhs_xw
			}
			multiply_variable = {
				var = ENG_VAR_ewzc_xyyxw
				value = 0.2
			}
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			set_variable = {
				ENG_VAR_ewzc_xyyxw = VAR_ENG_qjlm_xw
			}
			multiply_variable = {
				var = ENG_VAR_ewzc_xyyxw
				value = 0.2
			}
		}
		round_variable = ENG_VAR_ewzc_xyyxw
		ENG_yiyuan_icon_frames = yes
	}
	ENG_jisuan_VAR_ewzc_dqzcl = { #计算由当前支持率获得的额外支持
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			set_variable = {
				ENG_VAR_ewzc_dqzcl = ENG_gongdang_baoshoudang_support
			}
			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			set_variable = {
				ENG_VAR_ewzc_dqzcl = ENG_lianhezhenxian_support
			}
			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			set_variable = {
				ENG_VAR_ewzc_dqzcl = ENG_sbhs_support
			}
			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			set_variable = {
				ENG_VAR_ewzc_dqzcl = ENG_qjlm_support
			}
			
		}
		multiply_variable = {
			var = ENG_VAR_ewzc_dqzcl
			value = 100
		}
		round_variable = ENG_VAR_ewzc_dqzcl
		ENG_yiyuan_icon_frames = yes
	}
	ENG_jisuan_bop_zyzd = { #计算bop中左翼主导的收益
		set_variable = {
			ENG_VAR_ewzc_xyyxw_zyzd = VAR_ENG_lhzx_xw
		}
		multiply_variable = {
			var = ENG_VAR_ewzc_xyyxw_zyzd
			value = 0.2
		}
		set_variable = {
			ENG_VAR_ewzc_dqzcl_zyzd = ENG_lianhezhenxian_support
		}
		multiply_variable = {
			var = ENG_VAR_ewzc_dqzcl_zyzd
			value = 100
		}
		round_variable = ENG_VAR_ewzc_dqzcl_zyzd
		round_variable = ENG_VAR_ewzc_xyyxw_zyzd
		set_variable = {
			ENG_VAR_ewzc_zyzd = ENG_VAR_ewzc_dqzcl_zyzd
		}
		add_to_variable = {
			ENG_VAR_ewzc_zyzd = ENG_VAR_ewzc_xyyxw_zyzd
		}
	}

	ENG_sheding_yhzc_85_300 = {  #议案初始支持为上议院85，下议院300，并计算额外支持
		set_variable = {
			VAR_ENG_syy_support_jc = 85
		}
		set_variable = {
			VAR_ENG_xyy_support_jc = 300
		}	
		ENG_yiyuan_icon_frames = yes
	}
	ENG_sheding_yhzc_75_285 = {  #议案初始支持为上议院75，下议院285，并计算额外支持
		set_variable = {
			VAR_ENG_syy_support_jc = 75
		}
		set_variable = {
			VAR_ENG_xyy_support_jc = 285
		}	
		ENG_yiyuan_icon_frames = yes
	}
	ENG_sheding_yhzc_65_265 = {  #议案初始支持为上议院65，下议院265，并计算额外支持
		set_variable = {
			VAR_ENG_syy_support_jc = 65
		}
		set_variable = {
			VAR_ENG_xyy_support_jc = 265
		}	
		ENG_yiyuan_icon_frames = yes
	}
	ENG_sheding_yhzc_55_285 = {  #议案初始支持为上议院55，下议院285，并计算额外支持
		set_variable = {
			VAR_ENG_syy_support_jc = 55
		}
		set_variable = {
			VAR_ENG_xyy_support_jc = 285
		}	
		ENG_yiyuan_icon_frames = yes
	}
	ENG_sheding_yhzc_75_265 = {  #议案初始支持为上议院75，下议院265，并计算额外支持
		set_variable = {
			VAR_ENG_syy_support_jc = 75
		}
		set_variable = {
			VAR_ENG_xyy_support_jc = 265
		}	
		ENG_yiyuan_icon_frames = yes
	}

	ENG_jisuan_xuanju_jieguo = {  #计算选举结果
		clr_country_flag = FLAG_ENG_gdbsd_sx
		clr_country_flag = FLAG_ENG_lhzx_sx
		clr_country_flag = FLAG_ENG_sbhs_sx
		clr_country_flag = FLAG_ENG_qjlm_sx

		if = { #工党保守党胜选
			limit = {
				check_variable = { 
					ENG_gongdang_baoshoudang_support > ENG_lianhezhenxian_support 
				}
				check_variable = { 
					ENG_gongdang_baoshoudang_support > ENG_sbhs_support 
				}
				check_variable = { 
					ENG_gongdang_baoshoudang_support > ENG_qjlm_support 
				}
			}
			set_country_flag = FLAG_ENG_gdbsd_sx
		}
		else_if = { #联合阵线胜选
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_support > ENG_gongdang_baoshoudang_support 
				}
				check_variable = { 
					ENG_lianhezhenxian_support > ENG_sbhs_support 
				}
				check_variable = { 
					ENG_lianhezhenxian_support > ENG_qjlm_support 
				}
			}
			set_country_flag = FLAG_ENG_gdbsd_sx
		}
		else_if = { #圣杯皇室胜选
			limit = {
				check_variable = { 
					ENG_sbhs_support > ENG_lianhezhenxian_support 
				}
				check_variable = { 
					ENG_sbhs_support > ENG_gongdang_baoshoudang_support 
				}
				check_variable = { 
					ENG_sbhs_support > ENG_qjlm_support 
				}
			}
			set_country_flag = FLAG_ENG_gdbsd_sx
		}
		else_if = { #前进联盟胜选
			limit = {
				check_variable = { 
					ENG_qjlm_support > ENG_lianhezhenxian_support 
				}
				check_variable = { 
					ENG_qjlm_support > ENG_sbhs_support 
				}
				check_variable = { 
					ENG_qjlm_support > ENG_gongdang_baoshoudang_support 
				}
			}
			set_country_flag = FLAG_ENG_gdbsd_sx
		}


	}
	ENG_jisuan_xyy_xiweifenpei = {  #下议院席位分配计算
		set_variable = {
			VAR_ENG_gdbsd_xw = 590
		}
		multiply_variable = {
			var = VAR_ENG_gdbsd_xw
			value = ENG_gongdang_baoshoudang_support
		}

		set_variable = {
			VAR_ENG_lhzx_xw = 590
		}
		multiply_variable = {
			var = VAR_ENG_lhzx_xw
			value = ENG_lianhezhenxian_support
		}

		set_variable = {
			VAR_ENG_sbhs_xw = 590
		}
		multiply_variable = {
			var = VAR_ENG_sbhs_xw
			value = ENG_sbhs_support
		}

		set_variable = {
			VAR_ENG_qjlm_xw = 590
		}
		multiply_variable = {
			var = VAR_ENG_qjlm_xw
			value = ENG_qjlm_support
		}
		round_variable = VAR_ENG_gdbsd_xw
		round_variable = VAR_ENG_lhzx_xw
		round_variable = VAR_ENG_sbhs_xw
		round_variable = VAR_ENG_qjlm_xw
		ENG_jisuan_VAR_ewzc_xyyxw = yes
	}

#执政党相关预设
	ENG_yushe_zzd_influence_add_10 = { #执政党影响力增加10
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = 10 
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = 10 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = 10 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = 10 
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}
	ENG_yushe_zzd_influence_add_5 = { #执政党影响力增加5
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = 5 
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = 5 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = 5
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = 5
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}
	ENG_yushe_zzd_influence_add_1 = { #执政党影响力增加1
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = 1 
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = 1 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = 1
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = 1
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}
	ENG_yushe_zzd_influence_jian_10 = { #执政党影响力减少10
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = -10 
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = -10 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = -10 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = -10 
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}
	ENG_yushe_zzd_influence_jian_5 = { #执政党影响力减少5
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = -5 
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = -5 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = -5
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = -5
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}
	ENG_jiesuan_zzd_influence_monthly = { #每月执政党影响力结算
		if = {
			limit = {
				has_country_flag = FLAG_ENG_gdbsd_sx
			}
			add_to_variable = { 
				ENG_gongdang_baoshoudang_influence = VAR_ENG_zzd_infulunce_monthly
			}			
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_lhzx_sx
			}
			add_to_variable = { 
				ENG_lianhezhenxian_influence = VAR_ENG_zzd_infulunce_monthly 
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_sbhs_sx
			}
			add_to_variable = { 
				ENG_sbhs_influence = VAR_ENG_zzd_infulunce_monthly
			}	
		}
		else_if = {
			limit = {
				has_country_flag = FLAG_ENG_qjlm_sx
			}
			add_to_variable = { 
				ENG_qjlm_influence = VAR_ENG_zzd_infulunce_monthly
			}	
		}
		VAR_ENG_jisuan_influence_jijindu = yes		
	}



#议院gui
 #席位gui计算
	ENG_Seat_calculation = {
		set_temp_variable = {
			##工党
			red_total = ROOT.VAR_ENG_lhzx_xw
		}
		set_temp_variable = {
			##王党
			yellow_total = ROOT.VAR_ENG_sbhs_xw
		}
		set_temp_variable = {
			##保守党
			blue_total = ROOT.VAR_ENG_gdbsd_xw
		}
		set_temp_variable = {
			##圣杯前进联盟
			green_total = ROOT.VAR_ENG_qjlm_xw
		}
		set_temp_variable = {
			red_end = red_total
		}
		set_temp_variable = {
			blue_end = red_total
		}
		add_to_temp_variable = {
			blue_end = blue_total
		}
		set_temp_variable = {
			yellow_end = blue_end
		}
		add_to_temp_variable = {
			yellow_end = yellow_total
		}
		set_temp_variable = {
			green_end = yellow_end
		}
		add_to_temp_variable = {
			green_end = green_total
		}
		#数组
		clear_array = ROOT.ENG_hounse_of_commons_window_array
		resize_array = {
			array = ENG_hounse_of_commons_window_array
			value = 1
			size = red_end
		}
		resize_array = {
			array = ENG_hounse_of_commons_window_array
			value = 3
			size = blue_end
		}
		resize_array = {
			array = ENG_hounse_of_commons_window_array
			value = 2
			size = yellow_end
		}
		resize_array = {
			array = ENG_hounse_of_commons_window_array
			value = 7
			size = green_end
		}
		resize_array = {
			array = ENG_hounse_of_commons_window_array
			value = 7
			size = 600
		}
		ENG_Support_rate_pie_chart_calculation = yes
		ENG_Support_rate_progress_bar_calculation = yes
	}

 #支持率饼图计算
	ENG_Support_rate_pie_chart_calculation = {
		set_variable = {
			Labour_party_support_var = ROOT.ENG_lianhezhenxian_support
		}
		set_variable = {
			Conservative_party_support_var = ROOT.Labour_party_support_var
		}
		add_to_variable = {
			Conservative_party_support_var = ENG_gongdang_baoshoudang_support
		}
		set_variable = {
			Kings_Party_support_var = ROOT.Conservative_party_support_var
		}
		add_to_variable = {
			Kings_Party_support_var = ENG_sbhs_support
		}
		multiply_variable = {
			var = Labour_party_support_var
			value = 100
		}
		multiply_variable = {
			var = Conservative_party_support_var
			value = 100
		}
		multiply_variable = {
			var = Kings_Party_support_var
			value = 100
		}
		set_variable = {
			Holy_Grail_Forward_Alliance_support_var = 100
		}
	}

 #支持率进度条计算
	ENG_Support_rate_progress_bar_calculation = {
		set_variable = {
			Labour_party_Support_rate_var = ROOT.ENG_lianhezhenxian_support
		}
		multiply_variable = {
			var = Labour_party_Support_rate_var
			value = 100
		}
		set_variable = {
			Conservative_party_Support_rate_var = ROOT.ENG_gongdang_baoshoudang_support
		}
		multiply_variable = {
			var = Conservative_party_Support_rate_var
			value = 100
		}
		set_variable = {
			Kings_Party_Support_rate_var = ROOT.ENG_sbhs_support
		}
		multiply_variable = {
			var = Kings_Party_Support_rate_var
			value = 100
		}
		set_variable = {
			Holy_Grail_Forward_Alliance_Support_rate_var = ROOT.ENG_qjlm_support
		}
		multiply_variable = {
			var = Holy_Grail_Forward_Alliance_Support_rate_var
			value = 100
		}
		set_variable = {
			Conservative_party_Support_rate_progress_x = Labour_party_Support_rate_var
		}
		multiply_variable = {
			var = Conservative_party_Support_rate_progress_x
			value = 10
		}
		add_to_variable = {
			Conservative_party_Support_rate_progress_x = 300
		}
		set_variable = {
			Kings_Party_Support_rate_progress_x = Conservative_party_Support_rate_var
		}
		multiply_variable = {
			var = Kings_Party_Support_rate_progress_x
			value = 10
		}
		add_to_variable = {
			Kings_Party_Support_rate_progress_x = Conservative_party_Support_rate_progress_x
		}
		set_variable = {
			Holy_Grail_Forward_Alliance_Support_rate_progress_x = Kings_Party_Support_rate_var
		}
		multiply_variable = {
			var = Holy_Grail_Forward_Alliance_Support_rate_progress_x
			value = 10
		}
		add_to_variable = {
			Holy_Grail_Forward_Alliance_Support_rate_progress_x = Kings_Party_Support_rate_progress_x
		}
	}

 #加入历史议案
	ENG_add_to_his_motion_and_change_to_none = {
		add_to_array = {
			ENG_Parliament_past_motion = ENG_Parliament_num_of_motion_going
		}
		add_to_array = {
			ENG_Parliament_past_motion_state^ENG_Parliament_past_motion_i = ENG_Parliament_motion_going^ENG_Parliament_num_of_motion_going
		}
		set_variable = {
			ENG_Parliament_motion_going^ENG_Parliament_num_of_motion_going = 0
		}
		set_variable = {
			ENG_Parliament_num_of_motion_going = 0
		}


	}	
	

#伦敦危机相关

	ENG_jisuan_London_control = { #控制程度计算合集
		ENG_var_gui_control_degree_clamp = yes
		ENG_panding_London_state_first_owner_blue = yes	
	}
	ENG_jisuan_London_fortress = { #要塞等级计算合集
		ENG_var_gui_fortress_level_clamp = yes
		ENG_jisuan_London_fortress_effect = yes
	}
	ENG_jisuan_London_defense = { #防卫力量计算合集
		ENG_var_gui_defense_power_clamp = yes
	}

	ENG_var_gui_control_degree_clamp = {  #全地区控制程度限制大小
		clamp_variable = {
			var = 01:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 02:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 03:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 04:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 05:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 06:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 07:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 08:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 09:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 10:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 11:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 12:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 13:var_gui_control_degree
			min = 0
			max = 100
		}
		clamp_variable = {
			var = 14:var_gui_control_degree
			min = 0
			max = 100
		}
	}
	ENG_var_gui_defense_power_clamp = {  #全地区防御力量限制大小
		clamp_variable = {
			var = 01:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 02:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 03:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 04:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 05:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 06:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 07:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 08:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 09:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 10:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 11:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 12:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 13:var_gui_defense_power
			min = 0
			max = 999
		}
		clamp_variable = {
			var = 14:var_gui_defense_power
			min = 0
			max = 999
		}
	}
	ENG_var_gui_fortress_level_clamp = {  #全地区要塞等级限制大小
		clamp_variable = {
			var = 01:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 02:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 03:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 04:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 05:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 06:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 07:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 08:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 09:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 5:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 11:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 12:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 13:var_gui_fortress_level
			min = 0
			max = 5
		}
		clamp_variable = {
			var = 14:var_gui_fortress_level
			min = 0
			max = 5
		}
	}

	ENG_panding_London_state_first_owner_blue = {  #判定蓝线一阶段地块归属
		if = {
			limit = {
				check_variable = {
					01:var_gui_control_degree > 50
				}		
			}
			01 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			01 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					02:var_gui_control_degree > 50
				}		
			}
			02 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			02 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		#03皇宫区固定白

		if = {
			limit = {
				check_variable = {
					04:var_gui_control_degree > 50
				}		
			}
			04 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			04 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					05:var_gui_control_degree > 50
				}		
			}
			05 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			05 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					06:var_gui_control_degree > 50
				}		
			}
			06 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			06 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					07:var_gui_control_degree > 50
				}		
			}
			07 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			07 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					08:var_gui_control_degree > 50
				}		
			}
			08 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			08 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					09:var_gui_control_degree > 50
				}		
			}
			09 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			09 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					10:var_gui_control_degree > 50
				}		
			}
			10 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			10 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					11:var_gui_control_degree > 50
				}		
			}
			11 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			11 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					12:var_gui_control_degree > 50
				}		
			}
			12 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			12 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					13:var_gui_control_degree > 50
				}		
			}
			13 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			13 = {
				set_variable = { gui_display_frame = 1 }
			}
		}

		if = {
			limit = {
				check_variable = {
					14:var_gui_control_degree > 50
				}		
			}
			14 = {
				set_variable = { gui_display_frame = 2 }
			}
		}
		else = {
			14 = {
				set_variable = { gui_display_frame = 1 }
			}
		}
	}

	ENG_jisuan_London_manpower_select_defense_effect = { #计算当前防卫力量的增减效果
		#初始化变量
		ENG_jisuan_London_fortress_effect = yes #计算要塞效果
		set_variable = {
			VAR_ENG_London_gui_manpower_select_defense_effect = 0
		}
		set_variable = {
			VAR_ENG_London_gui_manpower_select_attack_effect = 0
		}
		set_variable = {
			VAR_ENG_London_gui_action_point_cost = 0
		}
		#设定各兵种数量
		set_variable = {
			VAR_ENG_manpower_select_irregular_num = VAR_ENG_London_gui_manpower_select_player_irregular
		}
		set_variable = {
			VAR_ENG_manpower_select_infantry_num = VAR_ENG_London_gui_manpower_select_player_infantry
		}
		set_variable = {
			VAR_ENG_manpower_select_tank_num = VAR_ENG_London_gui_manpower_select_player_tank
		}
		#计算行动力花费 
		add_to_variable = { 
			VAR_ENG_London_gui_action_point_cost = VAR_ENG_manpower_select_irregular_num 
		}
		add_to_variable = { 
			VAR_ENG_London_gui_action_point_cost = VAR_ENG_manpower_select_infantry_num 
		}
		add_to_variable = { 
			VAR_ENG_London_gui_action_point_cost = VAR_ENG_manpower_select_tank_num 
		}
		#计算防御力
		if = {
			limit = {
				has_country_flag = FLAG_ENG_London_player_select_blue
			}
			multiply_variable = {
				var = VAR_ENG_manpower_select_irregular_num
				value = VAR_ENG_London_blue_irregular_defense_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_defense_effect = VAR_ENG_manpower_select_irregular_num 
			}		
			multiply_variable = {
				var = VAR_ENG_manpower_select_infantry_num
				value = VAR_ENG_London_blue_infantry_defense_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_defense_effect = VAR_ENG_manpower_select_infantry_num 
			}
			multiply_variable = {
				var = VAR_ENG_manpower_select_tank_num
				value = VAR_ENG_London_blue_tank_defense_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_defense_effect = VAR_ENG_manpower_select_tank_num 
			}
		}
		
		#重置各兵种数量变量
		set_variable = {
			VAR_ENG_manpower_select_irregular_num = VAR_ENG_London_gui_manpower_select_player_irregular
		}
		set_variable = {
			VAR_ENG_manpower_select_infantry_num = VAR_ENG_London_gui_manpower_select_player_infantry
		}
		set_variable = {
			VAR_ENG_manpower_select_tank_num = VAR_ENG_London_gui_manpower_select_player_tank
		}
		#计算攻击力
		if = {
			limit = {
				has_country_flag = FLAG_ENG_London_player_select_blue
			}
			multiply_variable = {
				var = VAR_ENG_manpower_select_irregular_num
				value = VAR_ENG_London_blue_irregular_attack_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_attack_effect = VAR_ENG_manpower_select_irregular_num 
			}		
			multiply_variable = {
				var = VAR_ENG_manpower_select_infantry_num
				value = VAR_ENG_London_blue_infantry_attack_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_attack_effect = VAR_ENG_manpower_select_infantry_num 
			}
			multiply_variable = {
				var = VAR_ENG_manpower_select_tank_num 
				value = VAR_ENG_London_blue_tank_attack_number
			}
			add_to_variable = { 
				VAR_ENG_London_gui_manpower_select_attack_effect = VAR_ENG_manpower_select_tank_num 
			}
		}
		
		#扣除要塞减伤
		set_variable = { #减伤变量
			VAR_ENG_London_jisuan_jianshang_effect = 1
		}
		subtract_from_variable = {
			VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
		}
		multiply_variable = {
			var = VAR_ENG_London_gui_manpower_select_attack_effect
			value = VAR_ENG_London_jisuan_jianshang_effect
		}
		#四舍五入
		round_variable = VAR_ENG_London_gui_manpower_select_attack_effect
	}
	ENG_jisuan_London_fortress_effect = { #计算要塞效果 
		set_variable = {
			VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
		}
		multiply_variable = {
			var = VAR_ENG_London_gui_manpower_select_fortress_effect
			value = ENG_London_map_selected_state:var_gui_fortress_level
		}
	}

	ENG_London_close_manpower_defense_window = { #关闭防御，进攻，特殊行动界面合集
		set_variable = {
			VAR_ENG_London_gui_manpower_select_player_irregular = 0
		}
		set_variable = {
			VAR_ENG_London_gui_manpower_select_player_infantry = 0
		}
		set_variable = {
			VAR_ENG_London_gui_manpower_select_player_tank = 0
		}

		ENG_jisuan_London_manpower_select_defense_effect = yes

		clr_country_flag = FLAG_ENG_London_defense_gui_visble 
		clr_country_flag = FLAG_ENG_London_attack_gui_visble 
		clr_country_flag = FLAG_ENG_London_action_gui_visble 
	}

	ENG_panding_London_state_owner_to_player = { #将当前地块归属划归玩家
		if = {
			limit = {
				has_country_flag = FLAG_ENG_London_player_select_blue
			}
			var:ENG_London_map_selected_state = {
				set_variable = { gui_display_frame = 2 }
			}	
		}
	}

	ENG_panding_London_left_mission_where = { #判定联合阵线扩张任务出现在哪个地区
		if = { #先判定联盟区
			limit = {
				check_variable = {
					07:var_gui_control_degree > 15
				}
			}	
			hidden_effect = {
				activate_mission = ENG_mission_London_kzsl_lmq07	
			}
					
		}
		else_if = { #码头区
			limit = {
				check_variable = {
					08:var_gui_control_degree > 20
				}
			}	
			hidden_effect = {
				activate_mission = ENG_mission_London_kzsl_mtq08	
			}
			
		}
		else_if = { #索姆区
			limit = {
				check_variable = {
					06:var_gui_control_degree > 20
				}
			}	
			hidden_effect = {
				activate_mission = ENG_mission_London_kzsl_smq06	
			}
		}
		else_if = { #磨坊区
			limit = {
				check_variable = {
					05:var_gui_control_degree > 59
				}
			}	
			hidden_effect = {
				activate_mission = ENG_mission_London_kzsl_mfq05	
			}
		}
		else = { #机场区
			hidden_effect = {
				activate_mission = ENG_mission_London_kzsl_jcq09	
			}
		}

	} 

	ENG_jisuan_London_left_revolution_num_of_army = { #左翼激进度及势力加成兵力计算，和地区调整
	 #激进度
		if = { #
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_jijindu > 90
				}
			}	
			add_to_variable = { #民兵
				VAR_ENG_London_gui_manpower_red_number_irregular = 20
			}
			add_to_variable = { #赤卫队 
				VAR_ENG_London_gui_manpower_red_number_magic = 3
			}
					
		}
		else_if = { #
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_jijindu > 80
				}
			}	
			add_to_variable = { #民兵
				VAR_ENG_London_gui_manpower_red_number_irregular = 16
			}
			add_to_variable = { #赤卫队 
				VAR_ENG_London_gui_manpower_red_number_magic = 2
			}
		}
		else_if = { #
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_jijindu > 70
				}
			}	
			add_to_variable = { #民兵
				VAR_ENG_London_gui_manpower_red_number_irregular = 12
			}
			add_to_variable = { #赤卫队 
				VAR_ENG_London_gui_manpower_red_number_magic = 2
			}
		}
		else_if = { #
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_jijindu > 60
				}
			}	
			add_to_variable = { #民兵
				VAR_ENG_London_gui_manpower_red_number_irregular = 8
			}
			add_to_variable = { #赤卫队 
				VAR_ENG_London_gui_manpower_red_number_magic = 1
			}
		}
		else_if = { #
			limit = {
				check_variable = { 
					ENG_lianhezhenxian_jijindu > 50
				}
			}	
			add_to_variable = { #民兵
				VAR_ENG_London_gui_manpower_red_number_irregular = 4
			}
			add_to_variable = { #赤卫队 
				VAR_ENG_London_gui_manpower_red_number_magic = 1
			}
		}

	 #各区是否控制	
	 	if = { #联盟区
			limit = {
				check_variable = {
					07:gui_display_frame = 1
				}		
			}
			add_to_variable = { #步兵
				VAR_ENG_London_gui_manpower_red_number_infantry = 2
			}
		}
		set_variable = { #联盟区必红
			07:gui_display_frame = 1
		}

		if = { #索姆区
			limit = {
				check_variable = {
					06:gui_display_frame = 1
				}		
			}
			set_variable = {
				06:var_gui_fortress_level = 3
			}
			set_variable = {
				06:var_gui_defense_power = 80
			}
			add_to_variable = { #步兵
				VAR_ENG_London_gui_manpower_red_number_infantry = 2
			}
		}
		if = { #码头区
			limit = {
				check_variable = {
					08:gui_display_frame = 1
				}		
			}
			set_variable = {
				06:var_gui_fortress_level = 3
			}
			set_variable = {
				06:var_gui_defense_power = 80
			}
			add_to_variable = { #步兵
				VAR_ENG_London_gui_manpower_red_number_infantry = 2
			}
		}
		if = { #磨坊区
			limit = {
				check_variable = {
					05:gui_display_frame = 1
				}		
			}
			add_to_variable = { #步兵
				VAR_ENG_London_gui_manpower_red_number_infantry = 2
			}
		}
		if = { #机场区
			limit = {
				check_variable = {
					09:gui_display_frame = 1
				}		
			}
			add_to_variable = { #步兵
				VAR_ENG_London_gui_manpower_red_number_infantry = 2
			}
		}
	 #
	}

	ENG_jisuan_London_blue_round_start = { #首警司回合开始
		set_country_flag = FLAG_ENG_cywjhh #处于己方回合
		#行动力
			set_variable = { #行动力上限
				VAR_ENG_London_max_action_point = 5
			}
			if = { #金融城行动力
				limit = {
					check_variable = {
						01:gui_display_frame = 2
					}
				}
				add_to_variable = {
					VAR_ENG_London_max_action_point = 10
				}
			}
			if = { #码头区行动力
				limit = {
					check_variable = {
						01:gui_display_frame = 2
					}
				}
				add_to_variable = {
					VAR_ENG_London_max_action_point = 5
				}
			}
			set_variable = { #让行动力等于行动力上限
				VAR_ENG_London_current_action_point = VAR_ENG_London_max_action_point
			}
		#炮兵阵地计算
			set_variable = { #火炮支援可用次数
				VAR_ENG_London_artillery_support_num = 0
			}
			if = { #车站区
				limit = {
					or = {
						check_variable = {
							04:gui_display_frame = 2
						}
						check_variable = {
							04:gui_display_frame = 3
						}
					}
				}
				add_to_variable = {
					VAR_ENG_London_artillery_support_num = 1
				}
			}
			if = { #刘易斯区
				limit = {
					check_variable = {
						14:gui_display_frame = 2
					}
					has_country_flag = FLAG_ENG_yulysjs #快反部队已经于刘易斯区架设炮兵阵地
				}
				add_to_variable = {
					VAR_ENG_London_artillery_support_num = 1
				}
			}
		#兵种攻防	
			set_variable = { #民兵进攻
				VAR_ENG_London_blue_irregular_attack_number = 3
			}
			set_variable = { #民兵防御
				VAR_ENG_London_blue_irregular_defense_number = 3
			}
			if = { #索姆区广播大楼
				limit = {
					check_variable = {
						06:gui_display_frame = 2
					}
				}
				add_to_variable = { #民兵进攻
					VAR_ENG_London_blue_irregular_attack_number = 1
				}
				add_to_variable = { #民兵防御
					VAR_ENG_London_blue_irregular_defense_number = 1
				}
			}


		#其他区域
			if = { #磨坊区军火库
				limit = {
					check_variable = {
						05:gui_display_frame = 2
					}
				}
				add_to_variable = { #玩家民兵数量
					VAR_ENG_London_gui_manpower_player_number_irregular = 3
				}
			}

		#	
	}

	ENG_jisuan_London_blue_round_end = { #首警司回合结束
		clr_country_flag = FLAG_ENG_cywjhh #处于己方回合

	}

	ENG_jisuan_London_left_round_start = { #联合阵线回合开始
		#兵种攻防	
			set_variable = { #民兵进攻
				VAR_ENG_London_red_irregular_attack_number = 3
			}
			set_variable = { #民兵防御
				VAR_ENG_London_red_irregular_defense_number = 3
			}
			if = { #索姆区广播大楼
				limit = {
					check_variable = {
						06:gui_display_frame = 1
					}
				}
				add_to_variable = { #民兵进攻
					VAR_ENG_London_red_irregular_attack_number = 1
				}
				add_to_variable = { #民兵防御
					VAR_ENG_London_red_irregular_defense_number = 1
				}
			}


		#其他区域
			if = { #磨坊区军火库
				limit = {
					check_variable = {
						05:gui_display_frame = 1
					}
				}
				add_to_variable = { #玩家民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = 3
				}
			}
	}

	ENG_jisuan_London_left_round_end = { #联合阵线回合结算
		set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
			ENG_London_ai_selected_state = 0
		}
		set_variable = { #ai行动力为20
			VAR_ENG_London_left_ai_action_point = 20
		}
		#将事件通知用变量清零
			set_variable = { #
				VAR_ENG_London_ai_left_defense_area_1 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_defense_area_2 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_red_guards_area = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_1 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_2 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_3 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_4 = 0
			}

		
		#先判定两次防御行动和正规军防御
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #先增加防御
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_xsfy = yes #左翼防御判定
				set_variable = { #设定第一次防御行动的地区（事件通知用）
					VAR_ENG_London_ai_left_defense_area_1 = ENG_London_ai_selected_state
				}
			}

			

			ENG_London_left_zgjfy = yes #进行一次正规军防御
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #先增加防御
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_xsfy = yes #左翼防御判定

				set_variable = { #设定第二次防御行动的地区（事件通知用）
					VAR_ENG_London_ai_left_defense_area_2 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						check_variable = {
							VAR_ENG_London_ai_left_defense_area_2 = VAR_ENG_London_ai_left_defense_area_1
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_defense_area_2 = 0
					}
				}
			}
			

		#然后判定进攻和赤卫队行动
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_jgpd = yes #左翼进攻判定
				set_variable = { #设定第一次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_1 = ENG_London_ai_selected_state
				}
			}
			
			if = { #如果还有行动力，进行一次赤卫队进攻
				limit = {
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
					not = { #有指定地区时才进行行动
						check_variable = {
							ENG_London_ai_selected_state = 0
						}
					}
				}
				ENG_London_left_cwdjg = yes #进行一次赤卫队进攻

				if = { #
					limit = {
						has_country_flag = FLAG_left_cwdjg_yes
					}
					set_variable = { #设定赤卫队行动的地区（事件通知用）
						VAR_ENG_London_ai_left_red_guards_area = ENG_London_ai_selected_state
					}
				}
				else = {
					set_variable = { #设定赤卫队行动的地区（事件通知用）
						VAR_ENG_London_ai_left_red_guards_area = 0
					}
				}
			}
			
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_jgpd = yes #左翼进攻判定

				set_variable = { #设定第2次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_2 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						check_variable = {
							VAR_ENG_London_ai_left_attack_area_2 = VAR_ENG_London_ai_left_attack_area_1
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_attack_area_2 = 0
					}
				}
			}
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}			
			if = { #
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_jgpd = yes #左翼进攻判定

				set_variable = { #设定第3次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_3 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						or = {
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_3 = VAR_ENG_London_ai_left_attack_area_1
							}
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_3 = VAR_ENG_London_ai_left_attack_area_2
							}
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_attack_area_3 = 0
					}
				}
			}
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}			
			if = { #
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_red_number_irregular > 4
					}
					check_variable = {
						VAR_ENG_London_left_ai_action_point > 4
					}
				}
				ENG_panding_London_left_jgpd = yes #左翼进攻判定

				set_variable = { #设定第4次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_4 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						or = {
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_4 = VAR_ENG_London_ai_left_attack_area_1
							}
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_4 = VAR_ENG_London_ai_left_attack_area_2
							}
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_4 = VAR_ENG_London_ai_left_attack_area_3
							}
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_attack_area_4 = 0
					}
				}
			}
		#
	}

	ENG_jisuan_London_right_round_start = { #右翼回合开始
		#目前无内容。ai右翼进攻区域没啥东西
	}

	ENG_jisuan_London_right_round_end = { #右翼回合结算
		set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
			ENG_London_ai_selected_state = 0
		}
		#将事件通知用变量清零
			set_variable = { #
				VAR_ENG_London_ai_left_defense_area_1 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_defense_area_2 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_red_guards_area = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_1 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_2 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_3 = 0
			}
			set_variable = { #
				VAR_ENG_London_ai_left_attack_area_4 = 0
			}

		
		#先判定两次民兵防御行动
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #先增加防御
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_irregular > 4
					}
				}
				ENG_panding_London_right_xsfy = yes #右翼防御判定
				set_variable = { #设定第一次防御行动的地区（事件通知用）
					VAR_ENG_London_ai_left_defense_area_1 = ENG_London_ai_selected_state
				}
			}

			if = { #先增加防御
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_irregular > 4
					}
				}
				ENG_panding_London_right_xsfy = yes #右翼防御判定

				set_variable = { #设定第二次防御行动的地区（事件通知用）
					VAR_ENG_London_ai_left_defense_area_2 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						check_variable = {
							VAR_ENG_London_ai_left_defense_area_2 = VAR_ENG_London_ai_left_defense_area_1
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_defense_area_2 = 0
					}
				}
			}
			

		#然后判定炮击
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			
			
			if = { #如果还有行动力，进行一次炮击进攻

				ENG_London_right_pj = yes #进行一次炮击

				set_variable = { #设定炮击的地区（事件通知用）
					VAR_ENG_London_ai_left_red_guards_area = ENG_London_ai_selected_state
				}

			}

		#最后判定三次进攻	
			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #一
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_infantry > 1
					}
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_tank > 0
					}
				}
				ENG_panding_London_right_jgpd = yes #右翼进攻判定
				set_variable = { #设定第一次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_1 = ENG_London_ai_selected_state
				}
			}

			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}
			if = { #二
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_infantry > 1
					}
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_tank > 0
					}
				}
				ENG_panding_London_right_jgpd = yes #右翼进攻判定

				set_variable = { #设定第2次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_2 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						check_variable = {
							VAR_ENG_London_ai_left_attack_area_2 = VAR_ENG_London_ai_left_attack_area_1
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_attack_area_2 = 0
					}
				}
			}

			set_variable = { #设定ai默认目标地区为无地区，以免丢失目标
				ENG_London_ai_selected_state = 0
			}			
			if = { #三
				limit = {
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_infantry > 1
					}
					check_variable = {
						VAR_ENG_London_gui_manpower_black_number_tank > 0
					}
				}
				ENG_panding_London_right_jgpd = yes #右翼进攻判定

				set_variable = { #设定第3次进攻行动的地区（事件通知用）
					VAR_ENG_London_ai_left_attack_area_3 = ENG_London_ai_selected_state
				}
				if = { #判定通知是否重复
					limit = {
						or = {
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_3 = VAR_ENG_London_ai_left_attack_area_1
							}
							check_variable = {
								VAR_ENG_London_ai_left_attack_area_3 = VAR_ENG_London_ai_left_attack_area_2
							}
						}
					}
					set_variable = { #
						VAR_ENG_London_ai_left_attack_area_3 = 0
					}
				}
			}		
			
		#
	}

	#ai设计模块
		ENG_panding_London_left_xsfy = { #左翼防御判定

			if = { #联盟区
				limit = {
					check_variable = {
						07:gui_display_frame = 1
					}
					check_variable = {
						07:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 07
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					07:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			else_if = { #索姆区
				limit = {
					check_variable = {
						06:gui_display_frame = 1
					}
					check_variable = {
						06:var_gui_defense_power < 40
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 06
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					06:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			else_if = { #码头区
				limit = {
					check_variable = {
						08:gui_display_frame = 1
					}
					check_variable = {
						08:var_gui_defense_power < 40
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 08
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					08:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			else_if = { #磨坊区
				limit = {
					check_variable = {
						05:gui_display_frame = 1
					}
					check_variable = {
						05:var_gui_defense_power < 40
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 05
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					05:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			else_if = { #金融城
				limit = {
					check_variable = {
						01:gui_display_frame = 1
					}
					check_variable = {
						01:var_gui_defense_power < 40
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 01
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					01:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			else_if = { #机场区（基本上不驻防）
				limit = {
					check_variable = {
						09:gui_display_frame = 1
					}
					check_variable = {
						09:var_gui_defense_power < 10
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 09
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					09:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
			}
			


		}
		ENG_panding_London_left_jgpd = { #左翼进攻判定

			if = { #索姆区
				limit = {
					check_variable = {
						06:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 06
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定伤害值为民兵攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_red_irregular_attack_number
				}
				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 5
				}
				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_left_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					06:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							06:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 06:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						06:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}
			}
			else_if = { #码头区
				limit = {
					check_variable = {
						08:gui_display_frame = 2
					}
					not = {
						has_country_flag = FLAG_ENG_kfbdjr
					}

				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 08
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定伤害值为民兵攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_red_irregular_attack_number
				}
				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 5
				}
				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_left_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					08:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							08:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 08:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						08:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}	
			}
			else_if = { #磨坊区
				limit = {
					check_variable = {
						05:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 05
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定伤害值为民兵攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_red_irregular_attack_number
				}
				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 5
				}
				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_left_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					05:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							05:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 05:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						05:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}	
			}
			else_if = { #金融城
				limit = {
					check_variable = {
						01:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 01
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定伤害值为民兵攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_red_irregular_attack_number
				}
				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 5
				}
				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_left_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					01:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							01:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 01:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						01:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}	
			}
			else_if = { #西敏区
				limit = {
					check_variable = {
						02:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 02
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_red_number_irregular = -5
				}
				add_to_variable = { #扣除行动力
					VAR_ENG_London_left_ai_action_point = -5
				}
				set_variable = { #设定伤害值为民兵攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_red_irregular_attack_number
				}
				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 5
				}
				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					} 
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_left_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					02:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							02:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 02:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						02:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}	
			}
		}
		ENG_London_left_zgjfy = { #左翼正规军防御
			if = { #
				limit = {
					check_variable = { #步兵数量大于1
						VAR_ENG_London_gui_manpower_red_number_infantry > 1
					}
					not = { #有指定地区时才进行行动
						check_variable = {
							ENG_London_ai_selected_state = 0
						}
					}
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_red_number_infantry = -2
				}
				set_variable = { #设定防御值为步兵防御力
					VAR_ENG_London_left_ai_defense = VAR_ENG_London_red_infantry_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_left_ai_defense
					value = 2
				}
				add_to_variable = { #加上防御值
					ENG_London_ai_selected_state:var_gui_defense_power = VAR_ENG_London_left_ai_defense 
				}		
				ENG_jisuan_London_defense = yes
			}

		}
		ENG_London_left_cwdjg = { #左翼赤卫队进攻
			clr_country_flag = FLAG_left_cwdjg_yes #事件通知用
			if = { #
				limit = {
					check_variable = { #赤卫队数量大于1
						VAR_ENG_London_gui_manpower_red_number_magic > 0
					}
					check_variable = { #ai目标地区堡垒等级大于1
						ENG_London_ai_selected_state:var_gui_fortress_level > 1
					}
					check_variable = { #目标地区剩余防卫力量大于20
						ENG_London_ai_selected_state:var_gui_defense_power > 20
					}
					check_variable = { #目标地区由地方控制
						ENG_London_ai_selected_state:gui_display_frame = 2
					}
				}

				set_country_flag = FLAG_left_cwdjg_yes #事件通知用

				add_to_variable = { #扣除赤卫队数量
					VAR_ENG_London_gui_manpower_red_number_magic = -1
				}
				set_variable = { #设定伤害值为赤卫队攻击力
					VAR_ENG_London_left_ai_damage = VAR_ENG_London_magic_attack_number
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes

				multiply_variable = { #计算伤害
					var = VAR_ENG_London_left_ai_damage
					value = 2
				}
				#赤卫队伤害无视要塞效果
				subtract_from_variable = { #打出伤害###
					ENG_London_ai_selected_state:var_gui_defense_power = VAR_ENG_London_left_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							ENG_London_ai_selected_state:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = ENG_London_ai_selected_state:var_gui_defense_power
						value = -1
					}
					set_variable = {  #左翼占领此地区
						ENG_London_ai_selected_state:gui_display_frame = 1
					}
					ENG_jisuan_London_defense = yes
				}	
			}
		}

		ENG_panding_London_right_xsfy = { #右翼防御判定
			if = { #格林尼治
				limit = {
					check_variable = {
						13:gui_display_frame = 4
					}
					check_variable = {
						13:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 13
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_black_number_irregular = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_right_ai_defense = VAR_ENG_London_black_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_right_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					13:var_gui_defense_power = VAR_ENG_London_right_ai_defense 
				}		
			}
			else_if = { #码头区
				limit = {
					check_variable = {
						08:gui_display_frame = 4
					}
					check_variable = {
						08:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 08
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_black_number_irregular = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_right_ai_defense = VAR_ENG_London_black_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_right_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					08:var_gui_defense_power = VAR_ENG_London_right_ai_defense 
				}
			}
			else_if = { #机场区
				limit = {
					check_variable = {
						09:gui_display_frame = 4
					}
					check_variable = {
						09:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 09
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_black_number_irregular = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_right_ai_defense = VAR_ENG_London_black_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_right_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					09:var_gui_defense_power = VAR_ENG_London_right_ai_defense 
				}
			}
			else_if = { #对角区
				limit = {
					check_variable = {
						10:gui_display_frame = 4
					}
					check_variable = {
						10:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 10
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_black_number_irregular = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_right_ai_defense = VAR_ENG_London_black_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_right_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					10:var_gui_defense_power = VAR_ENG_London_right_ai_defense 
				}
			}
			else_if = { #阿森纳区
				limit = {
					check_variable = {
						11:gui_display_frame = 4
					}
					check_variable = {
						11:var_gui_defense_power < 60
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 11
				}
				add_to_variable = { #扣除民兵数量
					VAR_ENG_London_gui_manpower_black_number_irregular = -5
				}
				set_variable = { #设定防御值为民兵防御力
					VAR_ENG_London_right_ai_defense = VAR_ENG_London_black_irregular_defense_number
				}
				multiply_variable = { #计算防御值
					var = VAR_ENG_London_right_ai_defense
					value = 5
				}

				add_to_variable = { #加上防御值
					11:var_gui_defense_power = VAR_ENG_London_right_ai_defense 
				}
			}
			
		}
		ENG_panding_London_right_jgpd = { #右翼进攻判定
			if = { #码头区
				limit = {
					check_variable = {
						08:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 08
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_black_number_infantry = -2
				}
				add_to_variable = { #扣除坦克数量
					VAR_ENG_London_gui_manpower_black_number_tank = -1
				}

				#计算伤害
				set_variable = { #设定伤害值为步兵攻击力
					VAR_ENG_London_right_ai_damage_1 = VAR_ENG_London_black_infantry_attack_number
				}
				multiply_variable = { #计算步兵伤害
					var = VAR_ENG_London_right_ai_damage_1
					value = 2
				}
				set_variable = { #设定伤害值为坦克攻击力
					VAR_ENG_London_right_ai_damage_2 = VAR_ENG_London_black_tank_attack_number
				}
				###坦克只有一个不用乘
				set_variable = { #开始加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_1
				}
				add_to_variable = { #加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_2
				}

				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_right_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					08:var_gui_defense_power = VAR_ENG_London_right_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							08:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 08:var_gui_defense_power
						value = -1
					}
					set_variable = {  #右翼占领此地区
						08:gui_display_frame = 4
					}
					ENG_jisuan_London_defense = yes
				}
			}
			else_if = { #机场区
				limit = {
					check_variable = {
						09:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 09
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_black_number_infantry = -2
				}
				add_to_variable = { #扣除坦克数量
					VAR_ENG_London_gui_manpower_black_number_tank = -1
				}

				#计算伤害
				set_variable = { #设定伤害值为步兵攻击力
					VAR_ENG_London_right_ai_damage_1 = VAR_ENG_London_black_infantry_attack_number
				}
				multiply_variable = { #计算步兵伤害
					var = VAR_ENG_London_right_ai_damage_1
					value = 2
				}
				set_variable = { #设定伤害值为坦克攻击力
					VAR_ENG_London_right_ai_damage_2 = VAR_ENG_London_black_tank_attack_number
				}
				###坦克只有一个不用乘
				set_variable = { #开始加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_1
				}
				add_to_variable = { #加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_2
				}

				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_right_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					09:var_gui_defense_power = VAR_ENG_London_right_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							09:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 09:var_gui_defense_power
						value = -1
					}
					set_variable = {  #右翼占领此地区
						09:gui_display_frame = 4
					}
					ENG_jisuan_London_defense = yes
				}
			}
			else_if = { #对角区
				limit = {
					check_variable = {
						10:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 10
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_black_number_infantry = -2
				}
				add_to_variable = { #扣除坦克数量
					VAR_ENG_London_gui_manpower_black_number_tank = -1
				}

				#计算伤害
				set_variable = { #设定伤害值为步兵攻击力
					VAR_ENG_London_right_ai_damage_1 = VAR_ENG_London_black_infantry_attack_number
				}
				multiply_variable = { #计算步兵伤害
					var = VAR_ENG_London_right_ai_damage_1
					value = 2
				}
				set_variable = { #设定伤害值为坦克攻击力
					VAR_ENG_London_right_ai_damage_2 = VAR_ENG_London_black_tank_attack_number
				}
				###坦克只有一个不用乘
				set_variable = { #开始加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_1
				}
				add_to_variable = { #加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_2
				}

				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_right_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					10:var_gui_defense_power = VAR_ENG_London_right_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							10:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 10:var_gui_defense_power
						value = -1
					}
					set_variable = {  #右翼占领此地区
						10:gui_display_frame = 4
					}
					ENG_jisuan_London_defense = yes
				}
			}
			else_if = { #阿森纳区
				limit = {
					check_variable = {
						11:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 11
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_black_number_infantry = -2
				}
				add_to_variable = { #扣除坦克数量
					VAR_ENG_London_gui_manpower_black_number_tank = -1
				}

				#计算伤害
				set_variable = { #设定伤害值为步兵攻击力
					VAR_ENG_London_right_ai_damage_1 = VAR_ENG_London_black_infantry_attack_number
				}
				multiply_variable = { #计算步兵伤害
					var = VAR_ENG_London_right_ai_damage_1
					value = 2
				}
				set_variable = { #设定伤害值为坦克攻击力
					VAR_ENG_London_right_ai_damage_2 = VAR_ENG_London_black_tank_attack_number
				}
				###坦克只有一个不用乘
				set_variable = { #开始加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_1
				}
				add_to_variable = { #加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_2
				}

				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_right_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					11:var_gui_defense_power = VAR_ENG_London_right_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							11:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 11:var_gui_defense_power
						value = -1
					}
					set_variable = {  #右翼占领此地区
						11:gui_display_frame = 4
					}
					ENG_jisuan_London_defense = yes
				}
			}
			else_if = { #西敏区
				limit = {
					check_variable = {
						02:gui_display_frame = 2
					}
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 02
				}
				add_to_variable = { #扣除步兵数量
					VAR_ENG_London_gui_manpower_black_number_infantry = -2
				}
				add_to_variable = { #扣除坦克数量
					VAR_ENG_London_gui_manpower_black_number_tank = -1
				}

				#计算伤害
				set_variable = { #设定伤害值为步兵攻击力
					VAR_ENG_London_right_ai_damage_1 = VAR_ENG_London_black_infantry_attack_number
				}
				multiply_variable = { #计算步兵伤害
					var = VAR_ENG_London_right_ai_damage_1
					value = 2
				}
				set_variable = { #设定伤害值为坦克攻击力
					VAR_ENG_London_right_ai_damage_2 = VAR_ENG_London_black_tank_attack_number
				}
				###坦克只有一个不用乘
				set_variable = { #开始加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_1
				}
				add_to_variable = { #加算伤害
					VAR_ENG_London_right_ai_damage = VAR_ENG_London_right_ai_damage_2
				}

				#计算要塞效果
					set_variable = { #要塞基础减伤
						VAR_ENG_London_gui_manpower_select_fortress_effect = 0.1
					}
					multiply_variable = { #乘上要塞等级
						var = VAR_ENG_London_gui_manpower_select_fortress_effect
						value = ENG_London_ai_selected_state:var_gui_fortress_level
					}
					set_variable = { #伤害基础百分比
						VAR_ENG_London_jisuan_jianshang_effect = 1
					}
					subtract_from_variable = { #算出有效伤害百分比
						VAR_ENG_London_jisuan_jianshang_effect = VAR_ENG_London_gui_manpower_select_fortress_effect
					}
					multiply_variable = { #计算有效伤害
						var = VAR_ENG_London_right_ai_damage
						value = VAR_ENG_London_jisuan_jianshang_effect
					}
				######	
				subtract_from_variable = { #打出伤害###
					02:var_gui_defense_power = VAR_ENG_London_right_ai_damage 
				}		
				if = {
					limit = { #如果伤害够了
						check_variable = {
							02:var_gui_defense_power < 1
						}
					}
					multiply_variable = { #把溢出伤害转化为防御力
						var = 02:var_gui_defense_power
						value = -1
					}
					set_variable = {  #右翼占领此地区
						02:gui_display_frame = 4
					}
					ENG_jisuan_London_defense = yes
				}
			}


		}
		ENG_London_right_pj = { #右翼炮击判定
			if = { #码头区
				limit = {
					check_variable = { #目标地区由地方控制
						08:gui_display_frame = 2
					}
					check_variable = { #ai目标地区堡垒等级大于0
						08:var_gui_fortress_level > 0
					}		
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 08
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes
			}
			else_if = { #机场区
				limit = {
					check_variable = { #目标地区由地方控制
						09:gui_display_frame = 2
					}
					check_variable = { #ai目标地区堡垒等级大于0
						09:var_gui_fortress_level > 0
					}		
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 09
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes
			}
			else_if = { #对角区
				limit = {
					check_variable = { #目标地区由地方控制
						10:gui_display_frame = 2
					}
					check_variable = { #ai目标地区堡垒等级大于0
						10:var_gui_fortress_level > 0
					}		
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 10
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes
			}
			else_if = { #阿森纳区
				limit = {
					check_variable = { #目标地区由地方控制
						11:gui_display_frame = 2
					}
					check_variable = { #ai目标地区堡垒等级大于0
						11:var_gui_fortress_level > 0
					}		
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 11
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes
			}
			else = { #西敏区
				limit = {
					check_variable = { #目标地区由地方控制
						02:gui_display_frame = 2
					}
					check_variable = { #ai目标地区堡垒等级大于0
						02:var_gui_fortress_level > 0
					}		
				}
				set_variable = { #设定ai选择地块为当前区域
					ENG_London_ai_selected_state = 02
				}
				add_to_variable = { #摧毁当地一级要塞
					ENG_London_ai_selected_state:var_gui_fortress_level = -1 
				}
				ENG_jisuan_London_fortress = yes
			}
		}
#wto相关
	ENG_new_members_join_wto = { #新成员加入世贸
		hidden_effect = { 
			add_to_variable = { 
				global.num_wto_member = 1
			}
			add_to_array = {
				array = global.wto_member
				value = ROOT
			}
			if = {
				limit = {
					is_in_array = { 
						array = global.wto_member
						value = ENG
					}
				}
				remove_from_array = { global.wto_member = ENG }
			}
		}
	}

	ENG_members_remove_wto = { #有成员离开世贸
		hidden_effect = {
			add_to_variable = {
				global.num_wto_member = -1
			}
			remove_from_array = { global.wto_member = ROOT }
		}
	}

	ENG_jisuan_wto_gdp = { #计算gdp
		set_variable = { #所有国家gdp
			global.var_all_gdp = 0 
		}
		set_variable = { #wto国家gdp
			global.var_wto_gdp = 0
		}
		set_variable = { #gdp占比
			global.var_wto_gdp_proportion = 0
		}
		set_variable = { #动态修正变量1
			ENG_VAR_wto_dynamic_1 = 0
		}
		set_variable = { #动态修正变量2
			ENG_VAR_wto_dynamic_2 = 0
		}
		set_variable = { #动态修正变量3
			global.ENG_VAR_wto_dynamic_3 = 0
		}
		set_variable = { #动态修正变量4
			global.ENG_VAR_wto_dynamic_4 = 0
		}
		set_variable = { #动态修正变量5
			global.ENG_VAR_wto_dynamic_5 = 0
		}

		for_each_scope_loop = { #将消失的国家移除出去 
			array = global.econ_countries
			if = {
				limit = {
					has_idea = ENG_idea_wto		
					exists = no		
				}
				add_to_variable = {
					global.num_wto_member = -1
				}
				remove_from_array = { global.wto_member = THIS }
			}
		}
		for_each_scope_loop = { #计算所有国家gdp
			array = global.econ_countries
			add_to_variable = { 
				global.var_all_gdp = total_shouru
			}
		}
		for_each_scope_loop = { #计算wto国家gdp
			array = global.econ_countries
			if = {
				limit = {
					or = {
						tag = ENG
						has_idea = ENG_idea_wto
					}

				}
				add_to_variable = { 
					global.var_wto_gdp = total_shouru
				}
			}
			
		}

		set_variable = {  #gdp占比
			global.var_wto_gdp_proportion = global.var_wto_gdp
		}
		divide_variable = { 
			global.var_wto_gdp_proportion = global.var_all_gdp 
		}

		set_variable = { #动态修正变量1
			ENG_VAR_wto_dynamic_1 = 0.3
		}
		multiply_variable = {
			var = ENG_VAR_wto_dynamic_1
			value = global.var_wto_gdp_proportion
		}

		set_variable = { #动态修正变量2
			ENG_VAR_wto_dynamic_2 = 0.6
		}
		multiply_variable = {
			var = ENG_VAR_wto_dynamic_2
			value = global.var_wto_gdp_proportion
		}

		set_variable = { #动态修正变量3
			global.ENG_VAR_wto_dynamic_3 = 0.2
		}
		multiply_variable = {
			var = global.ENG_VAR_wto_dynamic_3
			value = global.var_wto_gdp_proportion
		}

		set_variable = { #动态修正变量4
			global.ENG_VAR_wto_dynamic_4 = -0.4
		}
		multiply_variable = {
			var = global.ENG_VAR_wto_dynamic_4
			value = global.var_wto_gdp_proportion
		}

		set_variable = { #动态修正变量5
			global.ENG_VAR_wto_dynamic_5 = -1000
		}
		multiply_variable = {
			var = global.ENG_VAR_wto_dynamic_5
			value = global.var_wto_gdp_proportion
		}
		
	}
#
#圣杯解体
	ENG_JIETI = {
		hidden_effect = {
			every_country = {
				limit = {
					is_in_faction_with = ENG
					not = {
						tag = ENG
					}
				}
				set_country_flag = former_eng_country
				add_to_temp_array = {
					global.former_eng_members = THIS
				}
			}
			ENG = {
				dismantle_faction = yes
				set_country_flag = has_capitulated
			}
			ENG = {
				every_subject_country = {
					PREV = {
						set_autonomy = {
							target = PREV
							autonomy_state = autonomy_free
						}
					}
				}
			}
			every_country = {
				limit = {
					has_country_flag = former_eng_country
				}
				# ENG = {
				# 	set_autonomy = {
				# 		target = PREV
				# 		autonomy_state = autonomy_free
				# 	}
				# }
				leave_faction = yes
			}
			every_country = {
				limit = {
					has_country_flag = former_eng_country
					has_capitulated = yes
				}
				# ENG = {
				# 	set_autonomy = {
				# 		target = PREV
				# 		autonomy_state = autonomy_free
				# 	}
				# }
				country_event = {
					id = eng.668
					days = 4
				}
			}
			for_each_scope_loop = {
				array = global.former_eng_members
				for_each_scope_loop = {
					array = global.former_eng_members
					if = {
						limit = {
							NOT = {
								tag = PREV
							}
						}
						give_military_access = PREV
					}
				}
			}
			every_country = {
				limit = {
					has_country_flag = former_eng_country
					NOT = {
						surrender_progress>0
					}
					not = {
						capital_scope = {
							is_on_continent = europe
						}
					}
				}
				every_enemy_country = {
					white_peace = PREV
				}
			}
			EAS = {
				if = {
					limit = {
						has_capitulated = no
					}
					every_enemy_country = {
						white_peace = PREV
					}
				}
			}
			LIB = {
				limit = {
					has_country_flag = former_eng_country
					NOT = {
						surrender_progress>0
					}
				}
				every_enemy_country = {
					white_peace = PREV
				}
			}
			# every_country = {
			# 	limit = {
			# 		has_country_flag = former_eng_country
			# 		NOT = {
			# 			surrender_progress>0
			# 		}
			# 	}
			# 	faction_collapse_member_peace_effect = yes
			# }
		}
	}